var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.258,1,2.386]],["body/controllers/AppController.html",[0,2.064,1,3.913,2,1.671,3,0.315,4,0.315,5,0.243,6,3.97,7,0.56,8,1.726,9,6.529,10,1.574,11,0.023,12,5.762,13,0.701,14,4.666,15,1.317,16,3.294,17,0.389,18,0.701,19,3.574,20,3.97,21,0.315,22,0.015,23,2.302,24,1.574,25,1.398,26,2.014,27,0.018,28,0.018]],["title/modules/AppModule.html",[29,0.992,30,2.386]],["body/modules/AppModule.html",[1,3.208,2,1.426,3,0.183,4,0.183,5,0.141,11,0.023,17,0.461,18,0.407,19,3.319,20,2.303,21,0.183,22,0.008,26,1.168,27,0.013,28,0.013,29,1.334,30,4.696,31,1.096,32,1.03,33,1.247,34,1.247,35,1.096,36,2.177,37,1.247,38,2.303,39,2.303,40,2.303,41,3.602,42,3.602,43,3.602,44,3.602,45,3.602,46,3.602,47,3.602,48,1.835,49,1.247,50,1.247,51,2.706,52,2.996,53,2.706,54,2.303,55,3.982,56,3.982,57,2.037,58,3.982,59,2.706,60,2.303,61,2.706,62,2.706,63,3.982,64,2.706,65,2.706,66,1.335,67,1.835,68,2.706,69,2.704,70,2.706,71,2.704,72,2.706,73,2.706,74,2.037,75,1.679,76,2.706,77,2.706,78,2.706,79,2.706,80,2.706,81,2.996,82,2.303,83,2.706,84,2.706,85,2.706,86,2.706,87,2.706,88,2.706,89,2.706,90,2.303,91,2.706,92,0.969,93,2.706,94,2.706,95,3.388,96,3.982,97,1.03,98,0.969,99,3.982,100,3.982,101,3.982,102,2.706,103,2.303,104,2.706]],["title/injectables/AppService.html",[19,2.008,105,0.829]],["body/injectables/AppService.html",[3,0.347,4,0.347,5,0.267,11,0.023,13,0.771,17,0.347,18,0.771,19,3.488,21,0.347,22,0.016,27,0.019,28,0.019,97,2.479,105,1.441,106,2.213,107,4.363,108,5.128]],["title/controllers/AuthController.html",[0,1.258,109,2.386]],["body/controllers/AuthController.html",[0,1.032,2,1.032,3,0.195,4,0.195,5,0.15,7,0.346,8,1.248,10,1.81,11,0.023,13,0.806,15,1.515,17,0.414,18,0.433,21,0.195,22,0.009,23,1.421,24,0.972,25,1.607,27,0.013,28,0.013,92,1.032,98,1.922,103,2.451,109,2.83,110,2.451,111,1.788,112,2.451,113,2.109,114,3.546,115,2.403,116,5.366,117,2.83,118,3.546,119,2.881,120,3.644,121,4.168,122,2.881,123,1.467,124,1.382,125,0.685,126,1.382,127,5.207,128,1.922,129,4.168,130,4.168,131,2.881,132,2.881,133,3.644,134,4.168,135,2.881,136,2.881,137,2.843,138,2.881,139,2.881,140,1.556,141,1.956,142,2.881,143,2.451,144,2.451,145,1.956,146,1.956,147,1.527,148,1.956,149,1.647,150,2.799,151,2.451,152,2.881,153,2.881,154,2.881,155,2.881,156,2.881,157,2.594,158,3.038,159,3.546,160,1.556,161,2.881,162,4.168,163,2.881,164,3.546,165,1.328,166,2.881,167,2.881,168,2.881,169,1.956,170,2.881,171,2.881,172,2.881,173,2.881]],["title/guards/AuthGuard.html",[147,1.861,174,2.386]],["body/guards/AuthGuard.html",[3,0.121,4,0.121,5,0.093,7,0.214,8,0.864,11,0.023,13,0.775,15,1.384,16,1.65,17,0.363,18,0.268,21,0.121,22,0.006,24,1.407,25,1.608,26,1.801,27,0.009,28,0.009,57,1.343,69,2.834,92,1.755,97,1.099,98,2.087,105,0.681,112,2.456,113,1.887,123,1.545,124,1.456,125,0.776,126,1.456,128,1.034,140,1.81,141,1.212,147,1.529,149,1.02,160,1.558,165,2.377,174,1.96,175,1.785,176,1.519,177,1.212,178,2.456,179,4.173,180,3.177,181,2.886,182,2.886,183,2.886,184,2.886,185,3.633,186,1.785,187,3.688,188,2.226,189,2.089,190,5.159,191,1.785,192,2.886,193,3.882,194,1.785,195,2.456,196,2.589,197,2.886,198,1.785,199,2.886,200,3.442,201,1.785,202,2.886,203,3.503,204,1.785,205,1.241,206,3.55,207,2.886,208,1.785,209,5.697,210,1.785,211,3.688,212,4.173,213,1.785,214,1.791,215,1.108,216,1.519,217,1.785,218,1.108,219,0.946,220,1.02,221,1.108,222,1.343,223,1.343,224,1.212,225,1.785,226,1.785,227,1.785,228,1.785,229,1.785,230,1.785,231,1.785,232,1.785,233,1.785,234,2.456,235,2.886,236,1.108,237,1.785,238,1.519,239,1.02,240,1.785,241,1.785,242,1.343,243,1.785,244,1.785,245,1.785,246,1.785,247,1.785,248,1.785,249,2.886,250,1.785,251,1.529,252,1.785,253,1.519,254,1.519,255,1.785,256,1.343,257,1.529,258,2.211,259,3.633,260,3.633,261,1.212,262,1.343,263,1.785,264,1.519,265,1.519,266,4.173,267,1.785,268,1.785,269,1.343,270,1.108]],["title/modules/AuthModule.html",[29,0.992,41,2.18]],["body/modules/AuthModule.html",[2,1.947,3,0.287,4,0.287,5,0.221,11,0.023,17,0.427,18,0.639,21,0.287,22,0.013,26,1.835,27,0.017,28,0.017,29,1.691,31,1.722,32,1.619,33,1.96,34,1.96,35,1.722,36,2.761,37,1.96,41,4.141,48,2.505,49,1.96,50,1.96,52,3.2,109,4.069,150,3.815,151,3.618,218,2.638,253,3.618,254,3.618,271,3.618,272,3.618,273,4.253,274,4.253,275,4.253,276,4.253,277,3.2,278,4.253,279,4.253,280,3.2]],["title/injectables/AuthService.html",[105,0.829,150,2.008]],["body/injectables/AuthService.html",[3,0.107,4,0.107,5,0.082,7,0.189,8,0.782,11,0.023,13,0.736,15,1.583,16,1.492,17,0.346,18,0.237,21,0.107,22,0.005,24,1.125,25,1.466,27,0.008,28,0.008,92,1.195,97,0.993,98,1.959,105,0.616,106,0.681,113,1.979,114,2.22,115,2.437,117,2.266,118,2.839,123,1.466,124,1.675,125,0.852,126,1.382,128,0.935,140,1.782,150,1.492,157,3.093,158,3.037,159,4.875,160,1.687,164,2.22,165,1.538,177,2.915,180,2.281,187,3.683,188,2.112,189,1.873,196,2.869,205,1.334,211,1.188,215,0.979,218,0.979,219,0.836,220,0.902,221,0.979,239,2.216,251,2.054,257,2.054,261,1.072,270,0.979,280,1.188,281,1.343,282,2.61,283,2.22,284,3.337,285,0.979,286,1.579,287,2.61,288,1.579,289,3.876,290,2.22,291,1.579,292,2.61,293,1.579,294,1.964,295,1.579,296,3.876,297,2.61,298,1.579,299,2.632,300,1.579,301,3.876,302,3.298,303,1.579,304,2.61,305,1.579,306,1.188,307,1.579,308,2.61,309,1.343,310,1.579,311,3.876,312,4.625,313,4.164,314,1.579,315,1.579,316,1.579,317,1.343,318,1.343,319,1.579,320,2.839,321,1.579,322,2.216,323,3.337,324,1.343,325,1.579,326,1.188,327,2.61,328,1.579,329,1.579,330,1.579,331,1.538,332,1.579,333,1.579,334,1.579,335,1.579,336,1.579,337,1.579,338,2.61,339,1.579,340,1.579,341,1.343,342,2.839,343,1.579,344,1.579,345,2.61,346,1.579,347,2.22,348,2.61,349,1.579,350,2.61,351,2.61,352,1.579,353,1.579,354,1.579,355,0.993,356,2.61,357,1.579,358,1.579,359,1.579,360,1.579,361,1.343,362,1.188,363,1.072,364,1.343,365,1.072,366,2.839,367,1.343,368,1.072,369,1.343]],["title/classes/ConnectWalletDto.html",[22,0.011,370,2.643]],["body/classes/ConnectWalletDto.html",[3,0.298,4,0.298,5,0.229,7,0.53,10,1.877,11,0.023,13,0.836,17,0.376,21,0.298,22,0.017,27,0.018,28,0.018,125,0.778,157,3.229,158,3.781,205,1.337,223,3.32,370,4.187,371,1.787,372,3.754,373,1.993,374,4.412,375,4.412,376,4.412,377,4.412,378,4.139,379,3.781,380,1.904,381,3.452,382,4.412,383,3.32,384,3.754]],["title/classes/CreateNonceDto.html",[22,0.011,120,2.386]],["body/classes/CreateNonceDto.html",[3,0.303,4,0.303,5,0.233,7,0.539,10,1.514,11,0.023,13,0.675,17,0.415,21,0.303,22,0.018,27,0.018,28,0.018,66,2.214,67,2.068,120,3.819,125,0.628,157,3.412,205,1.175,355,1.708,371,1.818,373,2.014,378,3.819,380,1.937,381,3.49,383,3.377,385,4.785,386,3.819,387,4.488,388,3.819,389,4.488,390,2.785,391,3.048,392,3.819,393,2.068,394,2.566]],["title/modules/DatabaseModule.html",[29,0.992,42,2.18]],["body/modules/DatabaseModule.html",[3,0.3,4,0.3,5,0.231,11,0.023,17,0.378,18,0.668,21,0.3,22,0.014,27,0.018,28,0.018,29,1.726,31,1.799,32,1.691,33,2.047,34,2.047,35,1.799,36,2.817,37,2.817,42,4.25,48,2.575,49,2.047,50,2.047,52,3.343,189,2.883,277,4.205,395,3.779,396,3.779,397,3.779,398,4.442,399,4.442]],["title/injectables/DatabaseService.html",[105,0.829,189,1.423]],["body/injectables/DatabaseService.html",[3,0.306,4,0.219,5,0.168,7,0.388,8,1.355,11,0.023,13,0.894,15,1.473,17,0.306,18,0.486,21,0.219,22,0.01,27,0.014,28,0.014,92,1.62,97,1.986,105,1.068,106,1.395,113,2.085,160,1.658,180,2.574,189,1.832,219,1.713,224,2.196,258,1.713,331,1.49,373,1.62,400,2.751,401,3.072,402,5.219,403,5.653,404,5.653,405,6.165,406,6.165,407,4.524,408,3.233,409,3.233,410,3.233,411,1.848,412,4.524,413,2.751,414,3.233,415,3.233,416,5.653,417,6.458,418,5.653,419,2.196,420,3.233,421,3.233,422,3.233,423,3.233,424,3.233,425,3.233,426,3.233,427,3.233,428,3.233,429,3.233,430,4.524]],["title/controllers/EasyTestController.html",[0,1.258,431,2.386]],["body/controllers/EasyTestController.html",[0,1.528,2,1.528,3,0.288,4,0.288,5,0.222,7,0.512,8,1.631,10,1.439,11,0.023,13,0.641,15,1.205,17,0.368,18,0.641,21,0.288,22,0.013,23,2.105,24,1.439,25,1.278,27,0.017,28,0.017,74,4.099,75,3.38,111,2.647,113,1.907,115,2.43,117,3.699,123,1.278,124,1.205,125,0.597,126,1.205,128,1.528,157,2.886,160,1.356,205,1.254,294,3.211,419,2.897,431,3.699,432,3.699,433,3.63,434,4.634,435,5.447,436,4.267,437,3.43,438,3.63,439,4.267,440,4.267,441,4.267]],["title/modules/EasyTestModule.html",[29,0.992,43,2.18]],["body/modules/EasyTestModule.html",[2,2.01,3,0.302,4,0.302,5,0.233,11,0.023,17,0.414,18,0.672,21,0.302,22,0.014,27,0.018,28,0.018,29,1.732,31,1.811,32,1.702,33,2.061,34,2.061,35,1.811,36,2.826,37,2.061,43,4.195,48,2.586,49,2.061,50,2.061,74,4.223,75,2.775,431,4.165,432,3.037,437,3.865,438,3.805,442,3.805,443,3.805,444,4.473,445,4.473]],["title/injectables/EasyTestService.html",[105,0.829,437,2.008]],["body/injectables/EasyTestService.html",[3,0.214,4,0.214,5,0.164,7,0.38,8,1.334,11,0.023,13,0.775,15,1.258,17,0.399,18,0.475,21,0.214,22,0.01,24,1.739,25,1.334,27,0.014,28,0.014,75,3.473,92,1.133,97,1.695,98,1.847,105,1.052,106,1.365,113,1.945,115,2.088,117,3.025,123,1.544,124,1.456,125,0.721,126,1.456,128,1.133,140,2.041,157,2.36,160,1.639,165,1.457,180,3.02,187,4.733,188,2.714,189,2.479,196,2.764,205,1.169,211,2.38,216,2.691,218,1.962,219,1.676,220,1.808,221,1.962,261,2.147,264,2.691,265,2.691,280,2.38,283,3.79,285,1.962,290,3.79,294,3.352,318,2.691,320,2.691,324,2.691,363,2.147,364,2.691,365,2.147,366,4.387,367,2.691,368,2.147,369,2.691,432,3.801,437,2.546,446,2.691,447,3.162,448,3.162,449,3.162]],["title/classes/GetLeaderboardDto.html",[22,0.011,450,2.386]],["body/classes/GetLeaderboardDto.html",[3,0.314,4,0.314,5,0.242,7,0.558,10,1.568,11,0.023,13,0.699,17,0.314,21,0.314,22,0.018,27,0.018,28,0.018,125,0.65,126,1.623,331,2.142,371,1.883,373,2.059,380,2.006,411,2.658,450,3.904,451,4.891,452,3.956,453,3.568,454,2.481,455,4.891,456,4.649,457,4.649,458,4.891,459,4.326,460,4.649,461,3.956,462,3.956,463,4.649]],["title/classes/GetQuestsDto.html",[22,0.011,464,2.18]],["body/classes/GetQuestsDto.html",[3,0.256,4,0.256,5,0.197,7,0.455,10,1.912,11,0.023,13,0.852,17,0.408,21,0.341,22,0.019,27,0.016,28,0.016,66,1.87,67,1.747,125,0.88,205,0.792,331,2.324,355,1.443,371,1.536,373,1.806,379,3.13,380,1.636,390,2.353,393,1.747,394,2.168,401,3.425,411,2.883,453,2.883,454,2.177,459,3.796,464,3.13,465,3.796,466,2.853,467,3.903,468,3.849,469,3.425,470,4.103,471,3.792,472,3.792,473,2.168,474,4.291,475,5.044,476,3.792,477,2.853,478,3.792,479,2.853,480,4.291,481,3.226,482,2.853,483,3.796]],["title/classes/GetQuestsFilterDto.html",[22,0.011,470,2.386]],["body/classes/GetQuestsFilterDto.html",[3,0.284,4,0.284,5,0.218,7,0.504,10,1.416,11,0.023,13,0.631,17,0.425,21,0.364,22,0.02,27,0.017,28,0.017,66,2.071,67,1.934,125,0.833,205,1.126,355,1.598,371,1.7,373,1.931,379,3.344,380,1.811,390,2.604,393,1.934,394,2.399,401,2.85,459,4.056,464,2.604,465,4.056,466,3.158,467,3.344,468,2.85,470,4.267,479,3.158,480,4.586,481,3.571,482,3.158,483,4.728,484,3.571,485,4.197,486,4.197]],["title/classes/HttpExceptionFilter.html",[22,0.011,71,2.386]],["body/classes/HttpExceptionFilter.html",[3,0.186,4,0.186,5,0.143,7,0.33,8,1.207,11,0.023,13,0.606,15,0.777,17,0.322,18,0.414,21,0.186,22,0.009,23,1.358,24,0.928,27,0.013,28,0.013,66,1.358,67,2.198,69,3.239,71,2.738,92,1.708,97,1.048,98,2.298,113,1.516,123,1.207,124,1.138,125,0.564,126,1.138,160,0.875,203,2.738,205,1.168,214,3.258,222,2.071,224,2.738,251,1.458,257,2.783,258,2.783,322,1.573,355,1.999,371,1.115,393,1.268,473,1.573,487,4.059,488,2.342,489,4.77,490,2.753,491,5.252,492,2.753,493,4.032,494,4.059,495,5.252,496,2.753,497,4.032,498,3.43,499,2.753,500,2.342,501,2.753,502,2.753,503,2.753,504,3.002,505,2.753,506,2.753,507,4.032,508,5.252,509,1.869,510,4.395,511,2.753,512,4.032,513,1.708,514,2.753,515,2.753,516,2.753,517,2.753,518,2.753,519,4.032,520,4.059,521,2.753,522,2.753,523,4.059,524,4.77,525,4.77,526,2.753,527,2.753,528,2.753,529,2.753,530,2.753,531,4.032,532,2.753,533,2.753,534,4.77,535,2.753,536,2.753,537,2.753,538,2.753,539,2.753,540,2.753]],["title/classes/I18nException.html",[22,0.011,513,2.18]],["body/classes/I18nException.html",[3,0.314,4,0.314,5,0.242,11,0.023,13,0.699,16,2.658,17,0.314,18,0.699,21,0.314,22,0.015,27,0.018,28,0.018,97,1.77,123,1.393,124,1.313,125,0.873,126,1.313,205,1.201,214,3.873,302,4.891,355,1.77,371,1.883,393,2.142,401,3.904,454,2.006,504,2.658,513,3.567,541,3.956,542,5.749,543,4.649,544,4.649,545,3.956,546,4.649,547,4.649]],["title/injectables/I18nInterceptor.html",[105,0.829,548,2.643]],["body/injectables/I18nInterceptor.html",[3,0.256,4,0.256,5,0.197,7,0.454,8,1.508,11,0.023,13,0.568,15,1.067,17,0.382,18,0.568,21,0.256,22,0.012,25,1.132,26,1.632,27,0.016,28,0.016,92,1.354,98,2.161,105,1.189,106,1.632,123,1.132,124,1.067,125,0.529,126,1.067,165,2.32,193,4.541,195,3.217,205,1.052,224,2.567,258,2.003,322,2.878,355,2.154,393,2.32,504,2.161,510,3.788,513,3.124,545,3.217,548,3.788,549,3.217,550,5.034,551,5.034,552,5.66,553,6.035,554,3.781,555,5.66,556,5.034,557,3.781,558,3.217,559,3.781,560,3.781,561,3.781,562,3.781,563,5.034,564,3.781,565,3.781,566,3.781,567,3.781,568,3.781,569,3.781]],["title/interfaces/JwtPayload.html",[200,2.18,570,2.18]],["body/interfaces/JwtPayload.html",[3,0.285,4,0.285,5,0.219,7,0.505,11,0.023,17,0.285,21,0.403,27,0.017,28,0.017,125,0.931,137,2.231,140,1.338,200,3.351,205,1.468,219,2.231,236,2.613,363,4.272,365,4.272,373,1.935,454,2.873,570,3.351,571,3.169,572,2.86,573,5.352,574,5.352,575,5.352,576,2.407,577,2.86,578,3.583]],["title/controllers/LeaderboardController.html",[0,1.258,579,2.386]],["body/controllers/LeaderboardController.html",[0,1.412,2,1.412,3,0.266,4,0.266,5,0.205,7,0.473,8,1.55,10,1.329,11,0.023,13,0.592,15,1.113,17,0.442,18,0.592,21,0.266,22,0.012,23,1.944,24,1.329,25,1.181,27,0.017,28,0.017,111,2.446,113,1.836,115,2.34,123,1.181,124,1.113,125,0.551,126,1.113,128,1.412,137,3.25,140,2.025,145,2.677,146,2.677,147,2.089,148,2.677,149,2.253,160,1.253,169,2.677,419,4.166,450,4.166,579,3.514,580,3.354,581,3.354,582,4.915,583,3.942,584,3.942,585,3.942,586,3.354,587,3.942,588,3.303,589,3.354,590,3.942,591,3.942,592,3.942]],["title/modules/LeaderboardModule.html",[29,0.992,44,2.18]],["body/modules/LeaderboardModule.html",[2,2.028,3,0.306,4,0.306,5,0.236,11,0.023,17,0.417,18,0.682,21,0.306,22,0.014,27,0.018,28,0.018,29,1.743,31,1.837,32,1.726,33,2.09,34,2.09,35,1.837,36,2.844,37,2.09,44,4.209,48,2.609,49,2.09,50,2.09,579,4.191,588,3.878,589,3.859,593,3.859,594,3.859,595,4.535,596,4.535]],["title/injectables/LeaderboardService.html",[105,0.829,588,2.008]],["body/injectables/LeaderboardService.html",[3,0.188,4,0.188,5,0.145,7,0.576,8,1.217,11,0.023,13,0.611,15,0.785,17,0.324,18,0.418,21,0.188,22,0.009,24,1.37,25,1.438,26,1.201,27,0.013,28,0.013,92,1.455,97,1.546,98,2.1,105,0.959,106,1.201,113,1.525,115,1.944,123,1.217,124,1.147,125,0.568,126,1.147,128,0.996,140,0.884,160,1.863,165,1.872,180,2.004,188,2.613,189,2.374,205,1.003,215,1.726,220,1.59,221,1.726,251,2.153,257,2.153,270,2.521,285,1.726,299,3.584,317,3.457,322,2.323,331,1.282,368,2.759,411,1.59,453,3.017,454,2.071,455,3.457,473,1.59,581,4.776,582,3.457,588,2.323,597,2.367,598,2.782,599,4.063,600,2.782,601,4.063,602,2.782,603,4.063,604,2.782,605,4.063,606,2.782,607,4.8,608,2.782,609,2.782,610,2.367,611,2.367,612,2.367,613,2.782,614,4.491,615,4.063,616,2.093,617,4.8,618,4.063,619,2.782,620,5.614,621,2.782,622,2.782,623,2.782,624,4.063,625,2.782,626,4.063,627,2.782,628,2.782,629,2.782,630,2.782,631,2.782,632,2.782]],["title/classes/LoginDto.html",[22,0.011,133,2.386]],["body/classes/LoginDto.html",[3,0.28,4,0.28,5,0.215,7,0.497,10,1.803,11,0.023,13,0.803,17,0.4,21,0.28,22,0.017,27,0.017,28,0.017,66,2.044,67,1.909,125,0.748,133,3.63,157,3.313,158,3.88,205,1.306,355,2.035,371,1.678,373,1.915,378,4.019,379,3.317,380,1.788,381,3.317,383,3.118,390,2.571,391,2.814,392,3.525,393,2.463,394,3.056,482,3.118,484,3.525,633,3.525,634,5.346,635,4.144,636,4.144,637,4.144]],["title/classes/PaginationDto.html",[22,0.011,467,2.18]],["body/classes/PaginationDto.html",[3,0.292,4,0.292,5,0.225,7,0.519,10,1.853,11,0.023,13,0.826,17,0.292,21,0.292,22,0.017,27,0.018,28,0.018,125,0.768,223,3.253,331,2.531,371,1.751,373,1.967,378,4.1,380,1.866,384,3.678,411,3.14,453,3.452,454,2.742,458,5.137,461,3.678,462,4.674,467,3.408,469,4.1,473,3.14,474,4.674,477,4.134,638,3.678,639,4.324,640,4.324]],["title/classes/PatchUserProfileDto.html",[22,0.011,641,2.18]],["body/classes/PatchUserProfileDto.html",[3,0.304,4,0.304,5,0.234,7,0.541,10,1.519,11,0.023,13,0.677,17,0.381,21,0.304,22,0.018,26,2.433,27,0.018,28,0.018,66,2.222,67,2.075,125,0.63,140,1.791,205,1.178,355,2.145,371,1.824,373,2.019,379,3.497,380,1.944,388,3.832,390,2.794,393,2.075,394,2.575,641,3.497,642,4.796,643,3.832,644,5.485,645,4.504,646,4.504,647,4.504,648,4.504]],["title/controllers/QuestController.html",[0,1.258,649,2.386]],["body/controllers/QuestController.html",[0,1.007,2,1.007,3,0.19,4,0.19,5,0.146,7,0.338,8,1.227,10,1.789,11,0.023,13,0.797,15,1.498,17,0.398,18,0.423,21,0.19,22,0.009,23,1.387,24,0.948,25,1.589,27,0.013,28,0.013,98,1.007,111,1.745,113,2.1,115,2.676,123,1.589,124,1.498,125,0.742,126,1.498,128,1.9,137,3.219,140,1.93,144,2.393,145,1.91,146,1.91,147,1.49,148,1.91,149,1.608,160,1.686,169,2.781,205,1.38,313,2.393,419,3.603,453,2.341,464,3.292,468,2.781,469,1.91,586,2.393,649,2.781,650,2.393,651,2.812,652,4.109,653,3.484,654,3.484,655,4.109,656,2.812,657,5.487,658,4.514,659,2.812,660,2.812,661,2.393,662,4.095,663,2.812,664,2.812,665,2.812,666,2.812,667,2.812,668,2.812,669,2.812,670,2.761,671,2.393,672,2.812,673,2.812,674,2.812,675,2.812,676,2.812,677,2.812,678,4.095,679,2.812,680,2.812,681,2.812,682,2.812]],["title/modules/QuestModule.html",[29,0.992,45,2.18]],["body/modules/QuestModule.html",[2,2.028,3,0.306,4,0.306,5,0.236,11,0.023,17,0.417,18,0.682,21,0.306,22,0.014,27,0.018,28,0.018,29,1.743,31,1.837,32,1.726,33,2.09,34,2.09,35,1.837,36,2.844,37,2.09,45,4.209,48,2.609,49,2.09,50,2.09,649,4.191,670,3.878,671,3.859,683,3.859,684,3.859,685,4.535,686,4.535]],["title/injectables/QuestService.html",[105,0.829,670,2.008]],["body/injectables/QuestService.html",[3,0.094,4,0.094,5,0.073,7,0.167,8,0.705,11,0.024,13,0.653,15,1.131,16,0.797,17,0.294,18,0.21,21,0.094,22,0.004,24,0.794,25,1.301,26,1.548,27,0.008,28,0.008,82,1.187,92,1.974,97,0.896,98,1.974,105,0.556,106,0.602,113,1.85,115,2.232,123,1.301,124,1.227,125,0.608,126,1.227,128,1.285,140,1.47,141,0.947,149,0.797,160,1.751,165,2.683,178,1.187,180,1.976,188,1.996,189,1.76,196,1.46,205,1.301,214,2.225,215,0.865,219,0.739,220,0.797,221,0.865,234,2.003,239,2.05,251,2.123,256,1.771,257,2.123,261,0.947,262,2.298,269,2.699,270,2.486,285,0.865,299,3.954,322,3.15,326,1.05,361,1.187,368,0.947,413,1.187,453,2.29,454,1.875,468,2.436,469,1.598,473,1.746,483,1.05,498,4.134,504,2.05,509,2.074,576,1.346,610,1.187,612,1.187,614,2.003,616,1.771,652,2.598,653,2.003,654,2.003,655,2.003,657,4.577,658,3.935,661,2.003,670,1.346,687,1.187,688,3.054,689,1.395,690,1.395,691,1.395,692,1.395,693,2.354,694,1.395,695,2.354,696,1.395,697,1.395,698,5.983,699,3.051,700,1.395,701,1.395,702,4.304,703,1.05,704,3.054,705,1.395,706,2.354,707,1.395,708,1.395,709,2.354,710,2.354,711,2.354,712,1.395,713,1.395,714,2.354,715,1.395,716,1.395,717,2.354,718,3.587,719,2.354,720,1.395,721,1.395,722,1.395,723,3.054,724,1.395,725,3.054,726,1.395,727,1.395,728,1.395,729,1.395,730,1.395,731,1.395,732,1.395,733,2.003,734,2.354,735,1.395,736,1.395,737,2.354,738,1.395,739,2.354,740,1.395,741,1.395,742,1.395,743,1.395,744,1.395,745,2.354,746,1.395,747,1.395,748,1.395,749,2.354,750,2.354,751,1.395,752,2.354,753,1.395,754,1.395,755,1.395,756,2.003,757,2.354,758,1.395,759,1.395,760,1.187,761,1.395,762,1.395,763,1.395,764,1.395,765,1.395,766,1.05,767,2.354,768,1.395,769,1.187,770,1.395,771,1.395,772,2.354,773,1.395,774,2.354,775,1.187]],["title/modules/RedisModule.html",[29,0.992,46,2.18]],["body/modules/RedisModule.html",[3,0.271,4,0.271,5,0.209,11,0.023,17,0.394,18,0.603,21,0.271,22,0.013,25,1.203,27,0.017,28,0.017,29,1.646,31,1.626,32,1.528,33,1.85,34,1.85,35,1.626,36,2.686,37,2.686,46,4.153,48,2.414,49,1.85,50,1.85,95,3.416,98,1.438,113,1.276,160,1.276,188,3.029,277,3.941,494,3.416,776,3.416,777,3.416,778,3.416,779,4.015,780,5.238,781,3.021,782,4.015,783,4.015,784,4.015,785,5.238,786,4.015,787,4.015,788,4.015,789,4.015,790,4.015]],["title/injectables/RedisService.html",[105,0.829,188,1.516]],["body/injectables/RedisService.html",[3,0.234,4,0.234,5,0.18,7,0.415,8,1.42,11,0.023,13,0.874,15,1.527,17,0.32,18,0.52,21,0.234,22,0.011,24,1.166,25,1.62,27,0.015,28,0.015,97,1.804,105,1.119,106,1.492,113,2.116,115,2.697,123,1.742,124,1.642,125,0.814,126,1.642,128,1.937,160,1.718,180,1.706,188,2.045,205,1.407,238,2.942,331,2.681,454,2.334,781,4.069,791,2.942,792,4.74,793,4.74,794,3.458,795,5.818,796,3.458,797,4.74,798,3.458,799,4.74,800,4.74,801,3.458,802,4.74,803,5.818,804,3.458,805,3.458,806,3.458,807,3.458,808,3.458,809,3.458]],["title/interfaces/TaskContent.html",[570,2.18,576,2.008]],["body/interfaces/TaskContent.html",[3,0.308,4,0.308,5,0.237,7,0.546,11,0.023,13,0.684,17,0.308,21,0.418,27,0.018,28,0.018,125,0.793,137,2.412,140,1.446,200,2.824,205,1.454,219,2.412,236,2.824,363,3.091,365,3.091,373,2.032,454,2.449,570,3.52,571,3.425,572,3.091,573,3.872,574,3.872,575,3.872,576,3.243,577,3.853,578,5.506,810,4.551,811,4.551]],["title/controllers/UserController.html",[0,1.258,812,2.386]],["body/controllers/UserController.html",[0,1.072,2,1.072,3,0.202,4,0.202,5,0.156,7,0.359,8,1.283,10,1.842,11,0.023,13,0.821,15,1.542,17,0.406,18,0.45,21,0.202,22,0.009,23,1.477,24,1.01,25,1.636,27,0.014,28,0.014,111,1.858,113,2.125,115,2.708,123,1.636,124,1.542,125,0.764,126,1.542,127,3.645,128,1.956,137,3.574,140,2.143,143,2.547,145,2.033,146,2.033,147,1.586,148,2.033,149,1.712,160,1.59,169,2.033,504,2.449,641,3.929,812,2.91,813,2.547,814,3.645,815,4.285,816,3.645,817,5.004,818,2.994,819,4.285,820,2.994,821,2.994,822,2.994,823,2.994,824,4.285,825,2.994,826,2.994,827,4.285,828,2.994,829,2.547,830,2.547,831,2.86,832,2.547,833,2.994,834,2.994,835,2.994,836,2.994,837,2.994,838,2.994,839,2.994]],["title/modules/UserModule.html",[29,0.992,47,2.18]],["body/modules/UserModule.html",[2,2.028,3,0.306,4,0.306,5,0.236,11,0.023,17,0.417,18,0.682,21,0.306,22,0.014,27,0.018,28,0.018,29,1.743,31,1.837,32,1.726,33,2.09,34,2.09,35,1.837,36,2.844,37,2.09,47,4.209,48,2.609,49,2.09,50,2.09,812,4.191,831,3.878,832,3.859,840,3.859,841,3.859,842,4.535,843,4.535]],["title/injectables/UserService.html",[105,0.829,831,2.008]],["body/injectables/UserService.html",[3,0.177,4,0.177,5,0.136,7,0.314,8,1.164,11,0.023,13,0.771,15,1.308,17,0.313,18,0.394,21,0.177,22,0.008,23,1.292,24,0.883,25,1.164,26,2,27,0.012,28,0.012,92,1.836,97,0.997,98,1.961,105,0.918,106,1.13,113,1.98,115,2.524,123,1.536,124,1.546,125,0.717,126,1.447,128,1.392,140,0.832,141,1.778,160,1.74,165,2.524,189,2.324,205,1.302,214,2.411,215,1.625,220,1.497,239,1.497,251,2.455,256,1.971,257,2.455,262,2.924,269,1.971,270,2.875,285,1.625,299,4.143,322,3.131,504,2.222,616,2.924,641,3.785,644,4.362,702,3.306,733,3.306,814,3.306,816,3.306,829,2.228,830,2.228,831,2.222,844,2.228,845,4.634,846,2.619,847,3.886,848,2.619,849,3.886,850,2.619,851,2.619,852,2.619,853,3.886,854,2.619,855,2.619,856,2.619,857,2.619,858,2.619,859,2.619,860,2.619,861,2.619,862,2.619,863,3.886,864,3.886]],["title/coverage.html",[865,3.605]],["body/coverage.html",[0,1.955,1,1.561,5,0.119,6,1.955,11,0.023,19,1.314,22,0.019,27,0.011,28,0.011,35,0.931,71,1.561,75,2.185,81,1.729,92,0.823,105,1.419,107,1.955,109,1.561,110,1.955,120,1.561,125,0.321,133,1.561,140,1.119,147,1.218,150,1.314,174,1.561,176,1.955,188,0.992,189,0.931,200,1.426,242,1.729,281,1.955,306,1.729,370,1.729,372,1.955,381,1.426,385,1.955,386,1.955,391,2.392,400,1.955,431,1.561,432,2.392,433,1.955,437,1.314,446,1.955,450,1.561,451,1.955,452,1.955,464,1.426,465,2.65,466,2.65,467,1.426,470,1.561,487,1.955,488,1.955,513,1.426,541,1.955,548,1.729,549,1.955,570,2.185,572,2.392,576,1.314,579,1.561,580,1.955,588,1.314,597,1.955,611,6.133,633,1.955,638,1.955,641,1.426,642,1.955,643,1.955,649,1.561,650,1.955,670,1.314,687,1.955,703,1.729,766,5.031,791,1.955,812,1.561,813,1.955,831,1.314,844,1.955,865,1.729,866,2.298,867,2.298,868,2.298,869,6.24,870,1.955,871,5.459,872,6.878,873,1.955,874,1.955,875,1.955,876,1.955,877,5.175,878,2.298,879,2.298,880,3.522,881,2.996,882,1.955,883,5.175,884,2.298,885,2.298,886,1.955,887,3.522,888,4.998,889,1.955,890,1.955,891,1.955,892,1.955,893,1.955,894,1.955,895,1.955,896,1.955,897,1.955,898,1.955,899,1.955,900,1.955,901,1.955,902,1.955,903,1.955,904,2.298,905,2.298]],["title/dependencies.html",[32,1.608,906,2.497]],["body/dependencies.html",[11,0.023,18,0.661,22,0.017,27,0.018,28,0.018,32,1.674,54,3.741,57,3.309,60,3.741,66,2.169,67,2.026,218,2.728,222,3.309,309,3.741,380,1.897,479,3.309,558,3.741,781,3.309,907,6.085,908,4.397,909,4.397,910,4.397,911,4.397,912,4.397,913,4.397,914,4.397,915,4.397,916,4.397,917,4.397,918,4.397,919,4.397,920,4.397,921,4.397,922,4.397,923,4.397,924,4.397,925,4.397,926,4.397,927,3.741,928,4.397,929,4.397,930,4.397,931,4.397,932,4.397,933,4.397,934,4.397]],["title/miscellaneous/functions.html",[362,3.179,935,1.678]],["body/miscellaneous/functions.html",[7,0.335,11,0.022,15,1.493,27,0.013,28,0.013,35,1.949,81,3.621,123,2.012,124,1.897,125,0.932,126,1.897,196,1.734,205,1.501,239,3.024,258,1.48,306,3.067,331,1.287,355,1.551,362,2.102,454,2.283,576,2.33,577,2.768,699,3.468,703,3.067,756,3.468,760,2.377,769,2.377,775,2.377,881,2.377,882,4.094,886,2.377,888,2.102,889,3.468,890,3.468,891,3.468,892,3.468,893,3.468,894,3.468,895,3.468,896,3.468,897,3.468,898,4.094,899,3.468,900,3.468,901,3.468,935,1.597,936,4.076,937,5.793,938,2.794,939,4.076,940,4.812,941,2.794,942,4.5,943,2.794,944,4.5,945,2.794,946,2.794,947,2.794,948,2.794,949,2.794,950,4.812,951,2.794,952,2.794,953,2.794,954,2.794,955,4.076,956,2.794,957,2.794,958,2.794,959,2.794]],["title/index.html",[7,0.352,341,2.497,960,2.935]],["body/index.html",[5,0.198,11,0.023,27,0.016,28,0.016,32,1.452,67,1.758,69,3.439,90,3.245,177,2.59,180,1.881,203,2.59,258,3.012,355,1.927,434,4.308,509,2.59,520,3.245,523,4.308,577,2.59,865,2.87,927,3.245,961,3.814,962,3.814,963,3.814,964,5.064,965,5.064,966,5.064,967,5.064,968,6.479,969,6.713,970,3.814,971,3.814,972,3.814,973,5.064,974,3.814,975,5.064,976,3.814,977,5.064,978,3.814,979,3.814,980,3.814,981,3.814,982,3.814,983,6.611,984,3.814,985,3.814,986,5.064,987,3.814,988,3.814,989,3.814,990,5.685,991,3.814,992,3.814,993,3.814,994,3.814,995,3.814,996,3.814,997,3.814,998,3.814,999,3.814,1000,3.245,1001,3.814,1002,3.814]],["title/modules.html",[31,1.94]],["body/modules.html",[11,0.019,27,0.019,28,0.019,30,3.251,31,1.939,41,2.97,42,2.97,43,2.97,44,2.97,45,2.97,46,2.97,47,2.97,1003,7.027,1004,7.027,1005,7.027,1006,7.027]],["title/overview.html",[1007,4.076]],["body/overview.html",[2,1.232,11,0.023,19,3.083,27,0.015,28,0.015,29,0.971,30,4.797,31,1.393,32,1.309,33,1.585,34,1.585,35,1.393,36,1.585,37,1.585,38,2.926,39,2.926,40,2.926,41,3.775,42,3.899,43,3.775,44,3.775,45,3.775,46,3.899,47,3.775,48,2.176,49,1.585,50,1.585,106,1.484,150,3.083,174,2.336,188,2.778,189,2.607,271,2.926,272,2.926,371,1.393,395,2.926,396,2.926,397,2.926,437,3.083,442,2.926,443,2.926,473,1.966,477,2.588,571,2.588,588,3.083,593,2.926,594,2.926,670,3.083,683,2.926,684,2.926,776,2.926,777,2.926,778,2.926,831,3.083,840,2.926,841,2.926,1007,2.926,1008,3.44,1009,3.44,1010,3.44,1011,3.44]],["title/properties.html",[373,1.513,906,2.497]],["body/properties.html",[11,0.023,27,0.02,28,0.02,177,3.656,347,4.58,373,1.928,1000,4.58,1012,5.384,1013,5.384,1014,5.384]],["title/miscellaneous/typealiases.html",[935,1.678,1015,4.224]],["body/miscellaneous/typealiases.html",[7,0.652,11,0.02,27,0.02,28,0.02,125,0.759,137,3.343,236,3.368,572,3.687,935,3.103,1016,5.429,1017,5.429]],["title/miscellaneous/variables.html",[935,1.678,1018,3.594]],["body/miscellaneous/variables.html",[7,0.326,11,0.023,16,1.554,25,1.8,26,1.173,27,0.013,28,0.013,92,1.43,98,2.082,124,1.128,128,0.973,140,1.269,158,3.239,165,1.84,193,2.045,203,1.846,205,1.288,206,3.398,236,1.686,239,1.554,242,3.006,251,2.116,257,2.116,258,2.116,326,2.045,331,2.679,342,3.398,355,1.034,380,1.724,381,2.938,391,2.712,393,1.84,394,2.283,411,3.324,500,2.312,509,3.545,510,3.006,766,3.006,870,2.312,873,2.312,874,4.029,875,2.312,876,2.312,888,2.045,902,3.398,903,3.398,935,1.554,937,3.398,942,2.312,944,2.312,1018,2.312,1019,2.718,1020,2.718,1021,2.718,1022,2.718,1023,2.718,1024,2.718,1025,2.718,1026,3.994,1027,2.718,1028,3.994,1029,2.718,1030,3.994,1031,3.994,1032,3.994,1033,2.718,1034,2.718,1035,2.718,1036,2.718,1037,2.718,1038,5.22,1039,5.815,1040,3.994,1041,3.994,1042,3.994,1043,3.994,1044,3.994,1045,3.994,1046,3.994,1047,3.994,1048,2.718,1049,3.994,1050,3.994,1051,3.994,1052,3.994,1053,5.22,1054,3.994,1055,2.718,1056,2.718,1057,2.718,1058,2.718,1059,2.718,1060,2.718,1061,2.718]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":611,"title":{},"body":{"injectables/LeaderboardService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1012,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":872,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":883,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["0x${string",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["0x[a",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":473,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/PaginationDto.html":{},"injectables/QuestService.html":{},"overview.html":{}}}],["1.0",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["1.1.1",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["1.11.13",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["1.7.7",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["1/8",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":477,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/PaginationDto.html":{},"overview.html":{}}}],["10.2.0",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["10.4.4",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["10.4.9",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":1011,"title":{},"body":{"overview.html":{}}}],["2.21.15",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["3.0.0",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":624,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["4.2.1",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["4.7.0",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["5.20.0",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":455,"title":{},"body":{"classes/GetLeaderboardDto.html":{},"injectables/LeaderboardService.html":{}}}],["6",{"_index":1009,"title":{},"body":{"overview.html":{}}}],["60",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["7.8.1",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1008,"title":{},"body":{"overview.html":{}}}],["86400",{"_index":722,"title":{},"body":{"injectables/QuestService.html":{}}}],["9",{"_index":1010,"title":{},"body":{"overview.html":{}}}],["9]{40",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9]{64",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":743,"title":{},"body":{"injectables/QuestService.html":{}}}],["__",{"_index":744,"title":{},"body":{"injectables/QuestService.html":{}}}],["acceptlanguageresolver",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["accesstoken",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":970,"title":{},"body":{"index.html":{}}}],["address",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["aliases",{"_index":1016,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":732,"title":{},"body":{"injectables/QuestService.html":{}}}],["api",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/QuestService.html":{}}}],["app.controller",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_filter",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":30,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":19,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arg",{"_index":544,"title":{},"body":{"classes/I18nException.html":{}}}],["arg.status",{"_index":547,"title":{},"body":{"classes/I18nException.html":{}}}],["args",{"_index":393,"title":{},"body":{"classes/CreateNonceDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"classes/LoginDto.html":{},"classes/PatchUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["argumentshost",{"_index":495,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["array.isarray(errormessage",{"_index":565,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["async",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["aud",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{}}}],["auth",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{}}}],["auth.controller",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.split",{"_index":248,"title":{},"body":{"guards/AuthGuard.html":{}}}],["auth/logout",{"_index":268,"title":{},"body":{"guards/AuthGuard.html":{}}}],["auth:user:${user.id",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["authcontroller",{"_index":109,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":147,"title":{"guards/AuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["authmodule",{"_index":41,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1000,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":150,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authuser",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"miscellaneous/typealiases.html":{}}}],["await",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["axios",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["badrequestexception",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["badrequestexception('error.invalid_interests",{"_index":860,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('error.no_auth_token",{"_index":231,"title":{},"body":{"guards/AuthGuard.html":{}}}],["badrequestexception('error.quest_not_found",{"_index":719,"title":{},"body":{"injectables/QuestService.html":{}}}],["badrequestexception('error.task_not_finished",{"_index":742,"title":{},"body":{"injectables/QuestService.html":{}}}],["badrequestexception('error.task_not_found",{"_index":731,"title":{},"body":{"injectables/QuestService.html":{}}}],["badrequestexception('error.user_not_found",{"_index":728,"title":{},"body":{"injectables/QuestService.html":{}}}],["badrequestexception('invalid",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64",{"_index":1030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcryptjs",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":250,"title":{},"body":{"guards/AuthGuard.html":{}}}],["bigint(1001",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/I18nException.html":{},"injectables/QuestService.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":774,"title":{},"body":{"injectables/QuestService.html":{}}}],["browse",{"_index":1006,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1003,"title":{},"body":{"modules.html":{}}}],["buildmessage",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cachedleaderboard",{"_index":601,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["cachedquest",{"_index":714,"title":{},"body":{"injectables/QuestService.html":{}}}],["cacheduserrank",{"_index":603,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["callhandler",{"_index":553,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["canactivate",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{}}}],["case",{"_index":772,"title":{},"body":{"injectables/QuestService.html":{}}}],["catch",{"_index":257,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["catch(exception",{"_index":493,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":499,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":557,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["catcherror(async",{"_index":561,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["cd",{"_index":974,"title":{},"body":{"index.html":{}}}],["chainid",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["check",{"_index":234,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/QuestService.html":{}}}],["checkpublicapi",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{}}}],["checkpublicapi(context",{"_index":197,"title":{},"body":{"guards/AuthGuard.html":{}}}],["checkuserbypayloaddata",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{}}}],["checkuserbypayloaddata(jwtpayload",{"_index":199,"title":{},"body":{"guards/AuthGuard.html":{}}}],["class",{"_index":22,"title":{"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":371,"title":{},"body":{"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"overview.html":{}}}],["classes/i18n.exception",{"_index":559,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["classsignature",{"_index":955,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clearedtaskcount",{"_index":749,"title":{},"body":{"injectables/QuestService.html":{}}}],["client",{"_index":785,"title":{},"body":{"modules/RedisModule.html":{}}}],["client.connect",{"_index":790,"title":{},"body":{"modules/RedisModule.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":395,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":397,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":396,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_easytestmodule",{"_index":442,"title":{},"body":{"modules/EasyTestModule.html":{},"overview.html":{}}}],["cluster_easytestmodule_providers",{"_index":443,"title":{},"body":{"modules/EasyTestModule.html":{},"overview.html":{}}}],["cluster_leaderboardmodule",{"_index":593,"title":{},"body":{"modules/LeaderboardModule.html":{},"overview.html":{}}}],["cluster_leaderboardmodule_providers",{"_index":594,"title":{},"body":{"modules/LeaderboardModule.html":{},"overview.html":{}}}],["cluster_questmodule",{"_index":683,"title":{},"body":{"modules/QuestModule.html":{},"overview.html":{}}}],["cluster_questmodule_providers",{"_index":684,"title":{},"body":{"modules/QuestModule.html":{},"overview.html":{}}}],["cluster_redismodule",{"_index":776,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_exports",{"_index":777,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_redismodule_providers",{"_index":778,"title":{},"body":{"modules/RedisModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":840,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":841,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":998,"title":{},"body":{"index.html":{}}}],["commons/filters/http",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["completed",{"_index":755,"title":{},"body":{"injectables/QuestService.html":{}}}],["compose",{"_index":979,"title":{},"body":{"index.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":701,"title":{},"body":{"injectables/QuestService.html":{}}}],["conflictexception('error.task_already_finished",{"_index":737,"title":{},"body":{"injectables/QuestService.html":{}}}],["connectwalletdto",{"_index":370,"title":{"classes/ConnectWalletDto.html":{}},"body":{"classes/ConnectWalletDto.html":{},"coverage.html":{}}}],["console.error(err",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/I18nInterceptor.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}}}],["constructor(arg",{"_index":542,"title":{},"body":{"classes/I18nException.html":{}}}],["constructor(databaseservice",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["constructor(i18n",{"_index":490,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["constructor(jwtservice",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{}}}],["constructor(private",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EasyTestController.html":{},"classes/HttpExceptionFilter.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(redis",{"_index":794,"title":{},"body":{"injectables/RedisService.html":{}}}],["contains",{"_index":708,"title":{},"body":{"injectables/QuestService.html":{}}}],["content",{"_index":769,"title":{},"body":{"injectables/QuestService.html":{},"miscellaneous/functions.html":{}}}],["contenttype",{"_index":767,"title":{},"body":{"injectables/QuestService.html":{}}}],["context",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/I18nInterceptor.html":{}}}],["context.getclass",{"_index":245,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.gethandler",{"_index":244,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":225,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EasyTestController.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/EasyTestController.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('easy",{"_index":439,"title":{},"body":{"controllers/EasyTestController.html":{}}}],["controller('leaderboard",{"_index":590,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["controller('quests",{"_index":672,"title":{},"body":{"controllers/QuestController.html":{}}}],["controller('user",{"_index":833,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["count",{"_index":709,"title":{},"body":{"injectables/QuestService.html":{}}}],["coverage",{"_index":865,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QuestService.html":{},"miscellaneous/variables.html":{}}}],["createclient",{"_index":780,"title":{},"body":{"modules/RedisModule.html":{}}}],["createnonce",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnonce(walletaddress",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnoncedto",{"_index":120,"title":{"classes/CreateNonceDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateNonceDto.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creating",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypto",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["crypto.createsign('sha256",{"_index":1024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.createverify('sha256",{"_index":1034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":500,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":502,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":503,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d",{"_index":981,"title":{},"body":{"index.html":{}}}],["data",{"_index":239,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["database.service",{"_index":399,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":42,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseservice",{"_index":189,"title":{"injectables/DatabaseService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/EasyTestService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["date().toisostring",{"_index":524,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date.now().tostring",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["dayjs",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["db",{"_index":977,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"controllers/EasyTestController.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"controllers/LeaderboardController.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{}}}],["decorators/class",{"_index":382,"title":{},"body":{"classes/ConnectWalletDto.html":{}}}],["decryptaes256",{"_index":889,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptaes256(encrypteddata",{"_index":938,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decryptrsawithprivatekey",{"_index":890,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptrsawithprivatekey(encrypteddata",{"_index":941,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decryptrsawithpublickey",{"_index":891,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["decryptrsawithpublickey(encrypteddata",{"_index":943,"title":{},"body":{"miscellaneous/functions.html":{}}}],["default",{"_index":411,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"injectables/LeaderboardService.html":{},"classes/PaginationDto.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["del",{"_index":792,"title":{},"body":{"injectables/RedisService.html":{}}}],["del(k",{"_index":797,"title":{},"body":{"injectables/RedisService.html":{}}}],["delete",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete('logout",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["delete('logout')@useguards(authguard",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["dependencies",{"_index":32,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["desc",{"_index":615,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["description",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":984,"title":{},"body":{"index.html":{}}}],["disconnect",{"_index":404,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["docker",{"_index":978,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":866,"title":{},"body":{"coverage.html":{}}}],["domain",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto",{"_index":384,"title":{},"body":{"classes/ConnectWalletDto.html":{},"classes/PaginationDto.html":{}}}],["dtos/create",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/get",{"_index":586,"title":{},"body":{"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{}}}],["dtos/login.dto",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/patch",{"_index":829,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":992,"title":{},"body":{"index.html":{}}}],["each",{"_index":647,"title":{},"body":{"classes/PatchUserProfileDto.html":{}}}],["eachprefix",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easy",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{}}}],["easytestcontroller",{"_index":431,"title":{"controllers/EasyTestController.html":{}},"body":{"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"coverage.html":{}}}],["easytestmodule",{"_index":43,"title":{"modules/EasyTestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EasyTestModule.html":{},"modules.html":{},"overview.html":{}}}],["easytestservice",{"_index":437,"title":{"injectables/EasyTestService.html":{}},"body":{"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"coverage.html":{},"overview.html":{}}}],["eip712domain",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["emit",{"_index":416,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["en",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["encodedpublickey",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["encryptaes256",{"_index":892,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptaes256(data",{"_index":945,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encrypteddata",{"_index":940,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encryptrsawithprivatekey",{"_index":893,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptrsawithprivatekey(data",{"_index":946,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encryptrsawithpublickey",{"_index":894,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encryptrsawithpublickey(data",{"_index":947,"title":{},"body":{"miscellaneous/functions.html":{}}}],["err",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/I18nInterceptor.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["err.code",{"_index":764,"title":{},"body":{"injectables/QuestService.html":{}}}],["err.response",{"_index":562,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["error",{"_index":258,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/DatabaseService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/I18nInterceptor.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["error.error",{"_index":530,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error.error.split('\\n",{"_index":532,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error.hasownproperty('error",{"_index":529,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error.message",{"_index":510,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/I18nInterceptor.html":{},"miscellaneous/variables.html":{}}}],["error.message[0",{"_index":539,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["error.statuscode",{"_index":569,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["errormessage",{"_index":563,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["errormessage[0",{"_index":566,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["errorstacklines",{"_index":531,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["errorstacklines.length",{"_index":533,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["event",{"_index":417,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["ex",{"_index":808,"title":{},"body":{"injectables/RedisService.html":{}}}],["example",{"_index":968,"title":{},"body":{"index.html":{}}}],["exception",{"_index":497,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["exception.filter.ts",{"_index":488,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:11",{"_index":492,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:13",{"_index":496,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":506,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":505,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":489,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["executioncontext",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/I18nInterceptor.html":{},"miscellaneous/variables.html":{}}}],["existinterests",{"_index":856,"title":{},"body":{"injectables/UserService.html":{}}}],["existinterests.length",{"_index":858,"title":{},"body":{"injectables/UserService.html":{}}}],["existjwt",{"_index":266,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exists",{"_index":235,"title":{},"body":{"guards/AuthGuard.html":{}}}],["exp",{"_index":573,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{}}}],["expired",{"_index":260,"title":{},"body":{"guards/AuthGuard.html":{}}}],["expiredtime",{"_index":803,"title":{},"body":{"injectables/RedisService.html":{}}}],["expiresin",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":222,"title":{},"body":{"guards/AuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"dependencies.html":{}}}],["extends",{"_index":401,"title":{},"body":{"injectables/DatabaseService.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/I18nException.html":{}}}],["extracttokenfromheader",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{}}}],["extracttokenfromheader(request",{"_index":202,"title":{},"body":{"guards/AuthGuard.html":{}}}],["f0",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fa",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fail",{"_index":1032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fallbacklanguage",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":256,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["fetch",{"_index":727,"title":{},"body":{"injectables/QuestService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["filter",{"_index":468,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["filter['title",{"_index":706,"title":{},"body":{"injectables/QuestService.html":{}}}],["finish",{"_index":739,"title":{},"body":{"injectables/QuestService.html":{}}}],["finished",{"_index":733,"title":{},"body":{"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["finishquesttask",{"_index":652,"title":{},"body":{"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["finishquesttask(user",{"_index":656,"title":{},"body":{"controllers/QuestController.html":{}}}],["finishquesttask(userid",{"_index":690,"title":{},"body":{"injectables/QuestService.html":{}}}],["format",{"_index":996,"title":{},"body":{"index.html":{}}}],["found",{"_index":265,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/EasyTestService.html":{}}}],["framework",{"_index":962,"title":{},"body":{"index.html":{}}}],["function",{"_index":766,"title":{},"body":{"injectables/QuestService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":362,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["general",{"_index":995,"title":{},"body":{"index.html":{}}}],["generateaccesstoken",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["generateaccesstoken(user",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["generatersakeypair",{"_index":895,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["generatersakeypair(privatekeypassphrase",{"_index":948,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generatesignaturewithrsaprivatekey",{"_index":902,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["get(':questid",{"_index":662,"title":{},"body":{"controllers/QuestController.html":{}}}],["get(':questid/userstatus",{"_index":677,"title":{},"body":{"controllers/QuestController.html":{}}}],["get(':questid/userstatus')@useguards(authguard",{"_index":667,"title":{},"body":{"controllers/QuestController.html":{}}}],["get('health",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["get('login",{"_index":435,"title":{},"body":{"controllers/EasyTestController.html":{}}}],["get('profile",{"_index":819,"title":{},"body":{"controllers/UserController.html":{}}}],["get('quest",{"_index":824,"title":{},"body":{"controllers/UserController.html":{}}}],["get('server",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@useguards(authguard",{"_index":584,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["get(k",{"_index":800,"title":{},"body":{"injectables/RedisService.html":{}}}],["getcorsorigins",{"_index":882,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gethealth",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["getleaderboard",{"_index":582,"title":{},"body":{"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{}}}],["getleaderboard(query",{"_index":583,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["getleaderboard(userid",{"_index":599,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["getleaderboarddto",{"_index":450,"title":{"classes/GetLeaderboardDto.html":{}},"body":{"classes/GetLeaderboardDto.html":{},"controllers/LeaderboardController.html":{},"coverage.html":{}}}],["getnonce",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getnonce(@body",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["getnonce(body",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["getnonce(walletaddress",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["getpayloadfromjwt",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{}}}],["getpayloadfromjwt(token",{"_index":207,"title":{},"body":{"guards/AuthGuard.html":{}}}],["getprofile",{"_index":814,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getprofile(@user",{"_index":835,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(user",{"_index":818,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(userid",{"_index":847,"title":{},"body":{"injectables/UserService.html":{}}}],["getquest",{"_index":653,"title":{},"body":{"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["getquest(@param('questid",{"_index":675,"title":{},"body":{"controllers/QuestController.html":{}}}],["getquest(questid",{"_index":661,"title":{},"body":{"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["getquests",{"_index":654,"title":{},"body":{"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["getquests(@query",{"_index":673,"title":{},"body":{"controllers/QuestController.html":{}}}],["getquests(page",{"_index":693,"title":{},"body":{"injectables/QuestService.html":{}}}],["getquests(query",{"_index":664,"title":{},"body":{"controllers/QuestController.html":{}}}],["getquestsdto",{"_index":464,"title":{"classes/GetQuestsDto.html":{}},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"controllers/QuestController.html":{},"coverage.html":{}}}],["getquestsfilterdto",{"_index":470,"title":{"classes/GetQuestsFilterDto.html":{}},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"coverage.html":{}}}],["getquestuserstatus",{"_index":655,"title":{},"body":{"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["getquestuserstatus(questid",{"_index":695,"title":{},"body":{"injectables/QuestService.html":{}}}],["getquestuserstatus(user",{"_index":666,"title":{},"body":{"controllers/QuestController.html":{}}}],["getrsaserverkeypair",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getserverpubkey",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":341,"title":{"index.html":{}},"body":{"injectables/AuthService.html":{}}}],["getuser",{"_index":815,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@user",{"_index":834,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(user",{"_index":821,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserqueststatus",{"_index":816,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getuserqueststatus(@user",{"_index":838,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserqueststatus(user",{"_index":823,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserqueststatus(userid",{"_index":849,"title":{},"body":{"injectables/UserService.html":{}}}],["global",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/RedisModule.html":{}}}],["guard",{"_index":174,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{}}}],["handle",{"_index":738,"title":{},"body":{"injectables/QuestService.html":{}}}],["handletaskfinish",{"_index":688,"title":{},"body":{"injectables/QuestService.html":{}}}],["handletaskfinish(task",{"_index":697,"title":{},"body":{"injectables/QuestService.html":{}}}],["hash",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["headerresolver",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["headerresolver(['x",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["history",{"_index":745,"title":{},"body":{"injectables/QuestService.html":{}}}],["host",{"_index":494,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"modules/RedisModule.html":{}}}],["host.switchtohttp",{"_index":501,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":997,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":214,"title":{},"body":{"guards/AuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["httpexceptionfilter",{"_index":71,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["i18n",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateNonceDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/PatchUserProfileDto.html":{},"dependencies.html":{},"index.html":{}}}],["i18nexception",{"_index":513,"title":{"classes/I18nException.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"coverage.html":{}}}],["i18ninterceptor",{"_index":548,"title":{"injectables/I18nInterceptor.html":{}},"body":{"injectables/I18nInterceptor.html":{},"coverage.html":{}}}],["i18nmodule",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nmodule.forroot",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nservice",{"_index":491,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["i18nvalidationmessage",{"_index":390,"title":{},"body":{"classes/CreateNonceDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserProfileDto.html":{}}}],["i18nvalidationmessage('validation.is_eth_wallet_address",{"_index":392,"title":{},"body":{"classes/CreateNonceDto.html":{},"classes/LoginDto.html":{}}}],["i18nvalidationmessage('validation.is_string",{"_index":482,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/LoginDto.html":{}}}],["i18nvalidationmessage('validation.is_string_array",{"_index":648,"title":{},"body":{"classes/PatchUserProfileDto.html":{}}}],["iat",{"_index":574,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{}}}],["id",{"_index":262,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["if_labs_server",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["ignoreexpiration",{"_index":255,"title":{},"body":{"guards/AuthGuard.html":{}}}],["implements",{"_index":224,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/DatabaseService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/I18nInterceptor.html":{}}}],["import",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["include",{"_index":616,"title":{},"body":{"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["increment",{"_index":750,"title":{},"body":{"injectables/QuestService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":810,"title":{},"body":{"interfaces/TaskContent.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inherited",{"_index":475,"title":{},"body":{"classes/GetQuestsDto.html":{}}}],["inject",{"_index":238,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/RedisService.html":{}}}],["inject('redis_client",{"_index":805,"title":{},"body":{"injectables/RedisService.html":{}}}],["injectable",{"_index":105,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EasyTestService.html":{},"injectables/I18nInterceptor.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EasyTestService.html":{},"injectables/I18nInterceptor.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EasyTestService.html":{},"injectables/I18nInterceptor.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["install",{"_index":967,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":269,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["intercept",{"_index":550,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["intercept(context",{"_index":551,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["interests",{"_index":644,"title":{},"body":{"classes/PatchUserProfileDto.html":{},"injectables/UserService.html":{}}}],["interests.join",{"_index":862,"title":{},"body":{"injectables/UserService.html":{}}}],["interests.length",{"_index":859,"title":{},"body":{"injectables/UserService.html":{}}}],["interface",{"_index":570,"title":{"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{}},"body":{"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{},"coverage.html":{}}}],["interfaces",{"_index":571,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":215,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["internalservererrorexception('error",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["internalservererrorexception('error.internal_server_error",{"_index":270,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["isemptyobject",{"_index":896,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isemptyobject(obj",{"_index":951,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isethtxhash",{"_index":874,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isethwalletaddress",{"_index":381,"title":{},"body":{"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isethwalletaddress({message",{"_index":636,"title":{},"body":{"classes/LoginDto.html":{}}}],["isfromvalid",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["isi18nerror",{"_index":545,"title":{},"body":{"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{}}}],["isint",{"_index":458,"title":{},"body":{"classes/GetLeaderboardDto.html":{},"classes/PaginationDto.html":{}}}],["isint()@min(1)@isnotempty",{"_index":474,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/PaginationDto.html":{}}}],["isnotempty",{"_index":378,"title":{},"body":{"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{}}}],["isnotempty()@isethwalletaddress({message",{"_index":387,"title":{},"body":{"classes/CreateNonceDto.html":{}}}],["isoptional",{"_index":459,"title":{},"body":{"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{}}}],["isoptional()@isint()@min(1)@max(100",{"_index":456,"title":{},"body":{"classes/GetLeaderboardDto.html":{}}}],["ispublic",{"_index":242,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispublic.find",{"_index":246,"title":{},"body":{"guards/AuthGuard.html":{}}}],["iss",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{}}}],["isstring",{"_index":379,"title":{},"body":{"classes/ConnectWalletDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserProfileDto.html":{}}}],["isstring()@isethwalletaddress()@isnotempty",{"_index":376,"title":{},"body":{"classes/ConnectWalletDto.html":{}}}],["isstring()@isnotempty",{"_index":374,"title":{},"body":{"classes/ConnectWalletDto.html":{}}}],["isstring({each",{"_index":645,"title":{},"body":{"classes/PatchUserProfileDto.html":{}}}],["isstring({message",{"_index":484,"title":{},"body":{"classes/GetQuestsFilterDto.html":{},"classes/LoginDto.html":{}}}],["iswalletverified",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["jang",{"_index":1002,"title":{},"body":{"index.html":{}}}],["join",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["json.parse(args",{"_index":522,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["json.parse(cachedleaderboard",{"_index":606,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["json.parse(cachedquest",{"_index":716,"title":{},"body":{"injectables/QuestService.html":{}}}],["json.parse(cacheduserrank",{"_index":608,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["json.parse(error",{"_index":515,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["json.stringify(error",{"_index":511,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["json.stringify(parsedleaderboard",{"_index":623,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["json.stringify(quest",{"_index":721,"title":{},"body":{"injectables/QuestService.html":{}}}],["json.stringify(userrank",{"_index":632,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["jwt",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["jwtmodule",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":200,"title":{"interfaces/JwtPayload.html":{}},"body":{"guards/AuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{},"coverage.html":{}}}],["jwtpayload.aud",{"_index":263,"title":{},"body":{"guards/AuthGuard.html":{}}}],["jwtservice",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["k",{"_index":799,"title":{},"body":{"injectables/RedisService.html":{}}}],["key",{"_index":577,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["labs",{"_index":963,"title":{},"body":{"index.html":{}}}],["lang",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["leaderboard",{"_index":581,"title":{},"body":{"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{}}}],["leaderboard.controller",{"_index":596,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["leaderboard.dto",{"_index":587,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["leaderboard.dto.ts",{"_index":452,"title":{},"body":{"classes/GetLeaderboardDto.html":{},"coverage.html":{}}}],["leaderboard.dto.ts:8",{"_index":457,"title":{},"body":{"classes/GetLeaderboardDto.html":{}}}],["leaderboard.map((user",{"_index":619,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["leaderboard.service",{"_index":589,"title":{},"body":{"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{}}}],["leaderboard:${userid",{"_index":605,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["leaderboardcontroller",{"_index":579,"title":{"controllers/LeaderboardController.html":{}},"body":{"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"coverage.html":{}}}],["leaderboardmodule",{"_index":44,"title":{"modules/LeaderboardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LeaderboardModule.html":{},"modules.html":{},"overview.html":{}}}],["leaderboardservice",{"_index":588,"title":{"injectables/LeaderboardService.html":{}},"body":{"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"coverage.html":{},"overview.html":{}}}],["legend",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":760,"title":{},"body":{"injectables/QuestService.html":{},"miscellaneous/functions.html":{}}}],["level",{"_index":418,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["license",{"_index":1013,"title":{},"body":{"properties.html":{}}}],["line",{"_index":535,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["line.trim",{"_index":537,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["list",{"_index":710,"title":{},"body":{"injectables/QuestService.html":{}}}],["literal",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"classes/I18nException.html":{}}}],["loaderoptions",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["log",{"_index":415,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["logger",{"_index":403,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["logger('databaseservice",{"_index":412,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["logic",{"_index":512,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["login",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{}}}],["login(@body",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@query('walletaddress",{"_index":440,"title":{},"body":{"controllers/EasyTestController.html":{}}}],["login(body",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(walletaddress",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{}}}],["logindto",{"_index":133,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@user",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(user",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["makerandomalphanumericstring",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["makerandomalphanumericstring(6",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["makerandomalphanumericstring(length",{"_index":953,"title":{},"body":{"miscellaneous/functions.html":{}}}],["manualvalidateclass",{"_index":897,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["manualvalidateclass(value",{"_index":954,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":460,"title":{},"body":{"classes/GetLeaderboardDto.html":{}}}],["max(100",{"_index":463,"title":{},"body":{"classes/GetLeaderboardDto.html":{}}}],["message",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateNonceDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"classes/LoginDto.html":{},"classes/PatchUserProfileDto.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["message:\\n",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":227,"title":{},"body":{"guards/AuthGuard.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/I18nInterceptor.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":461,"title":{},"body":{"classes/GetLeaderboardDto.html":{},"classes/PaginationDto.html":{}}}],["min(1",{"_index":462,"title":{},"body":{"classes/GetLeaderboardDto.html":{},"classes/PaginationDto.html":{}}}],["miscellaneous",{"_index":935,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mkdir",{"_index":971,"title":{},"body":{"index.html":{}}}],["mode",{"_index":986,"title":{},"body":{"index.html":{}}}],["module",{"_index":29,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":31,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/leaderboard/leaderboard.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/quest/quest.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["ms",{"_index":958,"title":{},"body":{"miscellaneous/functions.html":{}}}],["n",{"_index":536,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["name",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":961,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":556,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["nestjs",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateNonceDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/PatchUserProfileDto.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":218,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["nestjs/throttler",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/I18nInterceptor.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":552,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["next.handle().pipe",{"_index":560,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["nickname",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LeaderboardService.html":{}}}],["node",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["nonce",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["nonce.dto",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["nonce.dto.ts",{"_index":386,"title":{},"body":{"classes/CreateNonceDto.html":{},"coverage.html":{}}}],["nonce.dto.ts:12",{"_index":389,"title":{},"body":{"classes/CreateNonceDto.html":{}}}],["noncestring",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["normal",{"_index":526,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["notfoundexception",{"_index":216,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/EasyTestService.html":{}}}],["notfoundexception('user",{"_index":264,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/EasyTestService.html":{}}}],["null",{"_index":206,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":454,"title":{},"body":{"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/I18nException.html":{},"interfaces/JwtPayload.html":{},"injectables/LeaderboardService.html":{},"classes/PaginationDto.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"miscellaneous/functions.html":{}}}],["number(process.env.jwt_expire_time",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["number(process.env.redis_port",{"_index":789,"title":{},"body":{"modules/RedisModule.html":{}}}],["obj",{"_index":952,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":509,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/QuestService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.constructor",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":555,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["ongoing",{"_index":864,"title":{},"body":{"injectables/UserService.html":{}}}],["onmoduledestroy",{"_index":405,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["onmoduleinit",{"_index":406,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["optional",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":628,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["orderby",{"_index":613,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["originaljwtpayload",{"_index":241,"title":{},"body":{"guards/AuthGuard.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["output",{"_index":1028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["over",{"_index":627,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["overview",{"_index":1007,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":972,"title":{},"body":{"index.html":{}}}],["p2002",{"_index":765,"title":{},"body":{"injectables/QuestService.html":{}}}],["package",{"_index":906,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":469,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/PaginationDto.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["paginationdto",{"_index":467,"title":{"classes/PaginationDto.html":{}},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/PaginationDto.html":{},"coverage.html":{}}}],["paginationdto:10",{"_index":476,"title":{},"body":{"classes/GetQuestsDto.html":{}}}],["paginationdto:15",{"_index":478,"title":{},"body":{"classes/GetQuestsDto.html":{}}}],["param",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QuestController.html":{}}}],["param('questid",{"_index":678,"title":{},"body":{"controllers/QuestController.html":{}}}],["param('taskid",{"_index":681,"title":{},"body":{"controllers/QuestController.html":{}}}],["parameters",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parsederror",{"_index":514,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["parsederror.hasownproperty('isi18nerror",{"_index":516,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["parsederror['args",{"_index":518,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["parsederror['message",{"_index":517,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["parsederrormessage",{"_index":564,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["parsederrormessage.includes",{"_index":567,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["parsederrormessage.split",{"_index":568,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["parsederrorstack",{"_index":534,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["parsedleaderboard",{"_index":618,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["parsedtoken",{"_index":249,"title":{},"body":{"guards/AuthGuard.html":{}}}],["partial",{"_index":236,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["patch('login",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile",{"_index":827,"title":{},"body":{"controllers/UserController.html":{}}}],["patchprofile",{"_index":845,"title":{},"body":{"injectables/UserService.html":{}}}],["patchprofile(userid",{"_index":851,"title":{},"body":{"injectables/UserService.html":{}}}],["patchuserprofiledto",{"_index":641,"title":{"classes/PatchUserProfileDto.html":{}},"body":{"classes/PatchUserProfileDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["path",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["pattern",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pattern.test(value",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":211,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["plainmessage",{"_index":1033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":614,"title":{},"body":{"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{}}}],["port",{"_index":788,"title":{},"body":{"modules/RedisModule.html":{}}}],["post",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QuestController.html":{}}}],["post(':questid/tasks/:taskid/check",{"_index":680,"title":{},"body":{"controllers/QuestController.html":{}}}],["post(':questid/tasks/:taskid/check')@useguards(authguard",{"_index":659,"title":{},"body":{"controllers/QuestController.html":{}}}],["post('nonce",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["preconditionfailedexception",{"_index":1031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EasyTestController.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{}}}],["primarytype",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma",{"_index":413,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/QuestService.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":763,"title":{},"body":{"injectables/QuestService.html":{}}}],["prisma.questfindmanyargs['where",{"_index":705,"title":{},"body":{"injectables/QuestService.html":{}}}],["prisma/client",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["prisma/db",{"_index":219,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EasyTestService.html":{},"interfaces/JwtPayload.html":{},"injectables/QuestService.html":{},"interfaces/TaskContent.html":{}}}],["prismaclient",{"_index":402,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["private",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"injectables/EasyTestService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"index.html":{}}}],["privatekey",{"_index":942,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["privatekeypassphrase",{"_index":949,"title":{},"body":{"miscellaneous/functions.html":{}}}],["process.env.encoded_public_key",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.jwt_secret",{"_index":254,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["process.env.raw_private_key",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.raw_public_key",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["process.env.redis_host",{"_index":787,"title":{},"body":{"modules/RedisModule.html":{}}}],["production",{"_index":988,"title":{},"body":{"index.html":{}}}],["profile",{"_index":853,"title":{},"body":{"injectables/UserService.html":{}}}],["profile.dto",{"_index":830,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["profile.dto.ts",{"_index":643,"title":{},"body":{"classes/PatchUserProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:11",{"_index":646,"title":{},"body":{"classes/PatchUserProfileDto.html":{}}}],["profile.interests.split",{"_index":855,"title":{},"body":{"injectables/UserService.html":{}}}],["project",{"_index":965,"title":{},"body":{"index.html":{}}}],["promise",{"_index":196,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"injectables/QuestService.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":373,"title":{"properties.html":{}},"body":{"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"injectables/DatabaseService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"interfaces/TaskContent.html":{},"properties.html":{}}}],["property",{"_index":394,"title":{},"body":{"classes/CreateNonceDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/LoginDto.html":{},"classes/PatchUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["propertyname",{"_index":1039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{}}}],["providers",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/database/database.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["providers/database/database.service",{"_index":220,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["providers/redis/redis.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["providers/redis/redis.service",{"_index":221,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{}}}],["pubkey",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["public",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["publickey",{"_index":944,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":419,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{}}}],["query.size",{"_index":592,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["quest",{"_index":702,"title":{},"body":{"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["quest.controller",{"_index":686,"title":{},"body":{"modules/QuestModule.html":{}}}],["quest.service",{"_index":671,"title":{},"body":{"controllers/QuestController.html":{},"modules/QuestModule.html":{}}}],["quest.tasks.filter",{"_index":758,"title":{},"body":{"injectables/QuestService.html":{}}}],["quest.tasks.find((task",{"_index":729,"title":{},"body":{"injectables/QuestService.html":{}}}],["quest:${questid",{"_index":720,"title":{},"body":{"injectables/QuestService.html":{}}}],["questcontroller",{"_index":649,"title":{"controllers/QuestController.html":{}},"body":{"controllers/QuestController.html":{},"modules/QuestModule.html":{},"coverage.html":{}}}],["questid",{"_index":657,"title":{},"body":{"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["questmodule",{"_index":45,"title":{"modules/QuestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuestModule.html":{},"modules.html":{},"overview.html":{}}}],["quests",{"_index":651,"title":{},"body":{"controllers/QuestController.html":{}}}],["quests.dto",{"_index":669,"title":{},"body":{"controllers/QuestController.html":{}}}],["quests.dto.ts",{"_index":466,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"coverage.html":{}}}],["quests.dto.ts:13",{"_index":486,"title":{},"body":{"classes/GetQuestsFilterDto.html":{}}}],["quests.dto.ts:19",{"_index":472,"title":{},"body":{"classes/GetQuestsDto.html":{}}}],["questservice",{"_index":670,"title":{"injectables/QuestService.html":{}},"body":{"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"coverage.html":{},"overview.html":{}}}],["randomstr",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["randomstr.length",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["rank",{"_index":620,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["rank[0",{"_index":629,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["rank[0]?.rank",{"_index":630,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["rankedusers",{"_index":626,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["rawprivatekey",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["rawpublickey",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["readonly",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["readserverrsaprivatekeyfromfs",{"_index":898,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["redis",{"_index":781,"title":{},"body":{"modules/RedisModule.html":{},"injectables/RedisService.html":{},"dependencies.html":{}}}],["redis.service",{"_index":782,"title":{},"body":{"modules/RedisModule.html":{}}}],["redis_client",{"_index":783,"title":{},"body":{"modules/RedisModule.html":{}}}],["redisclienttype",{"_index":795,"title":{},"body":{"injectables/RedisService.html":{}}}],["redismodule",{"_index":46,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisservice",{"_index":188,"title":{"injectables/RedisService.html":{}},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"coverage.html":{},"overview.html":{}}}],["reflect",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{}}}],["register",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdecorator",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":203,"title":{},"body":{"guards/AuthGuard.html":{},"classes/HttpExceptionFilter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization",{"_index":247,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.method.touppercase",{"_index":228,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.parsedpayload",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.parsedpayload.user",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.path",{"_index":226,"title":{},"body":{"guards/AuthGuard.html":{}}}],["request.url",{"_index":525,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request['parsedpayload",{"_index":240,"title":{},"body":{"guards/AuthGuard.html":{}}}],["requestedtoken",{"_index":212,"title":{},"body":{"guards/AuthGuard.html":{}}}],["required",{"_index":756,"title":{},"body":{"injectables/QuestService.html":{},"miscellaneous/functions.html":{}}}],["requiredtaskcount",{"_index":757,"title":{},"body":{"injectables/QuestService.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolvers",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["resorces/rsa",{"_index":973,"title":{},"body":{"index.html":{}}}],["response",{"_index":498,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/QuestService.html":{}}}],["response.status(status).json",{"_index":527,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(status).send",{"_index":519,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.statusmessage",{"_index":507,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response['parsederrorstack",{"_index":538,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["results",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"injectables/I18nInterceptor.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/I18nInterceptor.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["rsa",{"_index":927,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["run",{"_index":983,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":558,"title":{},"body":{"injectables/I18nInterceptor.html":{},"dependencies.html":{}}}],["s/.test(value",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":253,"title":{},"body":{"guards/AuthGuard.html":{},"modules/AuthModule.html":{}}}],["select",{"_index":617,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["server",{"_index":964,"title":{},"body":{"index.html":{}}}],["server_pk_pkcs1.pem",{"_index":976,"title":{},"body":{"index.html":{}}}],["set",{"_index":793,"title":{},"body":{"injectables/RedisService.html":{}}}],["set(string",{"_index":802,"title":{},"body":{"injectables/RedisService.html":{}}}],["setmetadata('ispublic",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":966,"title":{},"body":{"index.html":{}}}],["setupcompile",{"_index":982,"title":{},"body":{"index.html":{}}}],["sha256",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["sha256hash",{"_index":899,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sha256hash(data",{"_index":956,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sign",{"_index":1023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign.end",{"_index":1027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign.sign(privatekey",{"_index":1029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sign.update(message",{"_index":1025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signature",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/LoginDto.html":{},"miscellaneous/variables.html":{}}}],["signed",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["size",{"_index":453,"title":{},"body":{"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"injectables/LeaderboardService.html":{},"classes/PaginationDto.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["skip",{"_index":610,"title":{},"body":{"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{}}}],["sleep",{"_index":900,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sleep(ms",{"_index":957,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sns",{"_index":773,"title":{},"body":{"injectables/QuestService.html":{}}}],["socket",{"_index":786,"title":{},"body":{"modules/RedisModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"modules/QuestModule.html":{},"injectables/QuestService.html":{},"modules/RedisModule.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["spec",{"_index":939,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sqs",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["src/.../isethtxhash.decorator.ts",{"_index":1019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../isethwallet.decorator.ts",{"_index":1020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ispublic.decorator.ts",{"_index":1021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":936,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../types.ts",{"_index":1017,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user.decorator.ts",{"_index":1022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":937,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:4",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["src/commons/classes/i18n.exception.ts",{"_index":541,"title":{},"body":{"classes/I18nException.html":{},"coverage.html":{}}}],["src/commons/classes/i18n.exception.ts:3",{"_index":543,"title":{},"body":{"classes/I18nException.html":{}}}],["src/commons/decorators/auth/ispublic.decorator.ts",{"_index":870,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/commons/decorators/class",{"_index":391,"title":{},"body":{"classes/CreateNonceDto.html":{},"classes/LoginDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/commons/decorators/request/user.decorator",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{}}}],["src/commons/decorators/request/user.decorator.ts",{"_index":876,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/commons/dtos/connectwallet.dto.ts",{"_index":372,"title":{},"body":{"classes/ConnectWalletDto.html":{},"coverage.html":{}}}],["src/commons/dtos/connectwallet.dto.ts:10",{"_index":375,"title":{},"body":{"classes/ConnectWalletDto.html":{}}}],["src/commons/dtos/connectwallet.dto.ts:15",{"_index":377,"title":{},"body":{"classes/ConnectWalletDto.html":{}}}],["src/commons/dtos/pagination.dto",{"_index":481,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{}}}],["src/commons/dtos/pagination.dto.ts",{"_index":638,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/commons/dtos/pagination.dto.ts:10",{"_index":639,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/commons/dtos/pagination.dto.ts:15",{"_index":640,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/commons/filters/http",{"_index":487,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/commons/guards/auth.guard",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{}}}],["src/commons/guards/auth.guard.ts",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/commons/guards/auth.guard.ts:110",{"_index":213,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/commons/guards/auth.guard.ts:24",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/commons/guards/auth.guard.ts:32",{"_index":194,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/commons/guards/auth.guard.ts:60",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/commons/guards/auth.guard.ts:71",{"_index":204,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/commons/guards/auth.guard.ts:84",{"_index":208,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/commons/guards/auth.guard.ts:95",{"_index":201,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/commons/interceptors/i18n.interceptor.ts",{"_index":549,"title":{},"body":{"injectables/I18nInterceptor.html":{},"coverage.html":{}}}],["src/commons/interceptors/i18n.interceptor.ts:12",{"_index":554,"title":{},"body":{"injectables/I18nInterceptor.html":{}}}],["src/easy",{"_index":432,"title":{},"body":{"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":881,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:23",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:42",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:47",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:53",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:109",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:11",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:126",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:168",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:23",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:72",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:85",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dtos/create",{"_index":385,"title":{},"body":{"classes/CreateNonceDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/login.dto.ts",{"_index":633,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/login.dto.ts:12",{"_index":637,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts:20",{"_index":635,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/leaderboard/dtos/get",{"_index":451,"title":{},"body":{"classes/GetLeaderboardDto.html":{},"coverage.html":{}}}],["src/modules/leaderboard/leaderboard.controller.ts",{"_index":580,"title":{},"body":{"controllers/LeaderboardController.html":{},"coverage.html":{}}}],["src/modules/leaderboard/leaderboard.controller.ts:14",{"_index":585,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/modules/leaderboard/leaderboard.module.ts",{"_index":595,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["src/modules/leaderboard/leaderboard.service.ts",{"_index":597,"title":{},"body":{"injectables/LeaderboardService.html":{},"coverage.html":{}}}],["src/modules/leaderboard/leaderboard.service.ts:12",{"_index":600,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/modules/leaderboard/leaderboard.service.ts:6",{"_index":598,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/modules/quest/dtos/get",{"_index":465,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"coverage.html":{}}}],["src/modules/quest/quest.controller.ts",{"_index":650,"title":{},"body":{"controllers/QuestController.html":{},"coverage.html":{}}}],["src/modules/quest/quest.controller.ts:13",{"_index":665,"title":{},"body":{"controllers/QuestController.html":{}}}],["src/modules/quest/quest.controller.ts:19",{"_index":663,"title":{},"body":{"controllers/QuestController.html":{}}}],["src/modules/quest/quest.controller.ts:25",{"_index":668,"title":{},"body":{"controllers/QuestController.html":{}}}],["src/modules/quest/quest.controller.ts:34",{"_index":660,"title":{},"body":{"controllers/QuestController.html":{}}}],["src/modules/quest/quest.module.ts",{"_index":685,"title":{},"body":{"modules/QuestModule.html":{}}}],["src/modules/quest/quest.service.ts",{"_index":687,"title":{},"body":{"injectables/QuestService.html":{},"coverage.html":{}}}],["src/modules/quest/quest.service.ts:109",{"_index":691,"title":{},"body":{"injectables/QuestService.html":{}}}],["src/modules/quest/quest.service.ts:15",{"_index":689,"title":{},"body":{"injectables/QuestService.html":{}}}],["src/modules/quest/quest.service.ts:21",{"_index":694,"title":{},"body":{"injectables/QuestService.html":{}}}],["src/modules/quest/quest.service.ts:260",{"_index":700,"title":{},"body":{"injectables/QuestService.html":{}}}],["src/modules/quest/quest.service.ts:53",{"_index":692,"title":{},"body":{"injectables/QuestService.html":{}}}],["src/modules/quest/quest.service.ts:89",{"_index":696,"title":{},"body":{"injectables/QuestService.html":{}}}],["src/modules/quest/utils.ts",{"_index":886,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/user/dtos/patch",{"_index":642,"title":{},"body":{"classes/PatchUserProfileDto.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts",{"_index":813,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:14",{"_index":822,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:19",{"_index":820,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:24",{"_index":828,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:32",{"_index":825,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":842,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":844,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:11",{"_index":846,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:14",{"_index":848,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:31",{"_index":852,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:67",{"_index":850,"title":{},"body":{"injectables/UserService.html":{}}}],["src/providers/database/database.module.ts",{"_index":398,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/providers/database/database.service.ts",{"_index":400,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/providers/database/database.service.ts:14",{"_index":407,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/providers/database/database.service.ts:38",{"_index":410,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/providers/database/database.service.ts:54",{"_index":409,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/providers/database/database.service.ts:58",{"_index":408,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/providers/redis/redis.module.ts",{"_index":779,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/providers/redis/redis.service.ts",{"_index":791,"title":{},"body":{"injectables/RedisService.html":{},"coverage.html":{}}}],["src/providers/redis/redis.service.ts:11",{"_index":801,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/providers/redis/redis.service.ts:15",{"_index":804,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/providers/redis/redis.service.ts:21",{"_index":798,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/providers/redis/redis.service.ts:5",{"_index":796,"title":{},"body":{"injectables/RedisService.html":{}}}],["src/types",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"controllers/UserController.html":{}}}],["src/types.ts",{"_index":572,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/types.ts:13",{"_index":811,"title":{},"body":{"interfaces/TaskContent.html":{}}}],["src/utils",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/utils.ts",{"_index":888,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ssut/nestjs",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["start",{"_index":985,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":987,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":989,"title":{},"body":{"index.html":{}}}],["started",{"_index":960,"title":{"index.html":{}},"body":{}}],["statements",{"_index":868,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":504,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"injectables/QuestService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["statuscode",{"_index":520,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["stay",{"_index":999,"title":{},"body":{"index.html":{}}}],["string",{"_index":205,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":575,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{}}}],["summary",{"_index":223,"title":{},"body":{"guards/AuthGuard.html":{},"classes/ConnectWalletDto.html":{},"classes/PaginationDto.html":{}}}],["super",{"_index":414,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["super(json.stringify(arg",{"_index":546,"title":{},"body":{"classes/I18nException.html":{}}}],["support",{"_index":1004,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1005,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":771,"title":{},"body":{"injectables/QuestService.html":{}}}],["table",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":612,"title":{},"body":{"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{}}}],["target",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["task",{"_index":698,"title":{},"body":{"injectables/QuestService.html":{}}}],["task.content",{"_index":770,"title":{},"body":{"injectables/QuestService.html":{}}}],["task.contenttype",{"_index":768,"title":{},"body":{"injectables/QuestService.html":{}}}],["task.id",{"_index":730,"title":{},"body":{"injectables/QuestService.html":{}}}],["task.rewardpoint",{"_index":752,"title":{},"body":{"injectables/QuestService.html":{}}}],["task.title",{"_index":754,"title":{},"body":{"injectables/QuestService.html":{}}}],["task.type",{"_index":759,"title":{},"body":{"injectables/QuestService.html":{}}}],["taskapicall",{"_index":703,"title":{},"body":{"injectables/QuestService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["taskapicall(content",{"_index":775,"title":{},"body":{"injectables/QuestService.html":{},"miscellaneous/functions.html":{}}}],["taskcontent",{"_index":576,"title":{"interfaces/TaskContent.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/QuestService.html":{},"interfaces/TaskContent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["taskid",{"_index":658,"title":{},"body":{"controllers/QuestController.html":{},"injectables/QuestService.html":{}}}],["tasks",{"_index":718,"title":{},"body":{"injectables/QuestService.html":{}}}],["template",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":434,"title":{},"body":{"controllers/EasyTestController.html":{},"index.html":{}}}],["test.controller",{"_index":445,"title":{},"body":{"modules/EasyTestModule.html":{}}}],["test.controller.ts",{"_index":433,"title":{},"body":{"controllers/EasyTestController.html":{},"coverage.html":{}}}],["test.controller.ts:9",{"_index":436,"title":{},"body":{"controllers/EasyTestController.html":{}}}],["test.module",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["test.module.ts",{"_index":444,"title":{},"body":{"modules/EasyTestModule.html":{}}}],["test.service",{"_index":438,"title":{},"body":{"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{}}}],["test.service.ts",{"_index":446,"title":{},"body":{"injectables/EasyTestService.html":{},"coverage.html":{}}}],["test.service.ts:15",{"_index":449,"title":{},"body":{"injectables/EasyTestService.html":{}}}],["test.service.ts:29",{"_index":448,"title":{},"body":{"injectables/EasyTestService.html":{}}}],["test.service.ts:8",{"_index":447,"title":{},"body":{"injectables/EasyTestService.html":{}}}],["test/easy",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"controllers/EasyTestController.html":{},"modules/EasyTestModule.html":{},"injectables/EasyTestService.html":{},"coverage.html":{}}}],["test:covsupport",{"_index":994,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":993,"title":{},"body":{"index.html":{}}}],["tests",{"_index":990,"title":{},"body":{"index.html":{}}}],["testscm",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.$connect",{"_index":429,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.$disconnect",{"_index":430,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.$on('error",{"_index":421,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.$on('info",{"_index":425,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.$on('query",{"_index":427,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.$on('warn",{"_index":423,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.authservice.createnonce(walletaddress",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getnonce(walletaddress",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(walletaddress",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(user.id",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifysigntypeddata",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.checkpublicapi(context",{"_index":230,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.checkuserbypayloaddata(payload",{"_index":237,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.databaseservice.$queryraw",{"_index":625,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["this.databaseservice.$transaction",{"_index":711,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.$transaction(async",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.databaseservice.interest.findmany",{"_index":857,"title":{},"body":{"injectables/UserService.html":{}}}],["this.databaseservice.leaderboard.findmany",{"_index":609,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["this.databaseservice.leaderboard.update",{"_index":751,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.profile.findunique",{"_index":854,"title":{},"body":{"injectables/UserService.html":{}}}],["this.databaseservice.profile.update",{"_index":861,"title":{},"body":{"injectables/UserService.html":{}}}],["this.databaseservice.quest.count",{"_index":712,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.quest.findmany",{"_index":713,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.quest.findunique",{"_index":717,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.user.findunique",{"_index":261,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"injectables/QuestService.html":{}}}],["this.databaseservice.userleaderboardhistory.create",{"_index":753,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.userqueststatus.findmany",{"_index":863,"title":{},"body":{"injectables/UserService.html":{}}}],["this.databaseservice.userqueststatus.findunique",{"_index":724,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.userqueststatus.update",{"_index":761,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.userqueststatus.upsert",{"_index":747,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.usertaskstatus.create",{"_index":746,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.databaseservice.usertaskstatus.findunique",{"_index":735,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.easytestservice.login(walletaddress",{"_index":441,"title":{},"body":{"controllers/EasyTestController.html":{}}}],["this.extracttokenfromheader(request",{"_index":229,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.generateaccesstoken(user",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["this.getpayloadfromjwt(token",{"_index":232,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.handletaskfinish(task",{"_index":740,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.i18n.t(error",{"_index":528,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.i18n.t(error.message",{"_index":540,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.i18n.t(message",{"_index":521,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["this.jwtservice.sign(payload",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":252,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.leaderboardservice.getleaderboard(user.id",{"_index":591,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["this.logger.error(event",{"_index":422,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.logger.log(event",{"_index":428,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.logger.verbose(event",{"_index":426,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.logger.warn(event",{"_index":424,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.questservice.finishquesttask(user.id",{"_index":682,"title":{},"body":{"controllers/QuestController.html":{}}}],["this.questservice.getquest(questid",{"_index":676,"title":{},"body":{"controllers/QuestController.html":{}}}],["this.questservice.getquests(page",{"_index":674,"title":{},"body":{"controllers/QuestController.html":{}}}],["this.questservice.getquestuserstatus(user.id",{"_index":679,"title":{},"body":{"controllers/QuestController.html":{}}}],["this.redis.del(k",{"_index":809,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.get(k",{"_index":806,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redis.set(string",{"_index":807,"title":{},"body":{"injectables/RedisService.html":{}}}],["this.redisservice.del(`auth:user:${userid",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.get",{"_index":604,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["this.redisservice.get(`auth:user:${payload.aud",{"_index":267,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.redisservice.get(`leaderboard",{"_index":602,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["this.redisservice.get(`nonce:${walletaddress",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.redisservice.get(`quest:${questid",{"_index":715,"title":{},"body":{"injectables/QuestService.html":{}}}],["this.redisservice.set",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{}}}],["this.redisservice.set(`nonce:${walletaddress",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getall('ispublic",{"_index":243,"title":{},"body":{"guards/AuthGuard.html":{}}}],["this.userservice.getprofile(user.id",{"_index":836,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getuserqueststatus(user.id",{"_index":839,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.patchprofile(user.id",{"_index":837,"title":{},"body":{"controllers/UserController.html":{}}}],["this.validateregisteredjwt(path",{"_index":233,"title":{},"body":{"guards/AuthGuard.html":{}}}],["throttlerguard",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forroot",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"injectables/I18nInterceptor.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["throwexceptionbyhttpstatus",{"_index":901,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["throwexceptionbyhttpstatus(error",{"_index":959,"title":{},"body":{"miscellaneous/functions.html":{}}}],["timestamp",{"_index":523,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"index.html":{}}}],["title",{"_index":483,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"injectables/QuestService.html":{}}}],["token",{"_index":209,"title":{},"body":{"guards/AuthGuard.html":{}}}],["tostring",{"_index":631,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["touch",{"_index":975,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":479,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"dependencies.html":{}}}],["true",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/I18nInterceptor.html":{},"injectables/LeaderboardService.html":{},"classes/PatchUserProfileDto.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":251,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["tx",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["tx.leaderboard.create",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["tx.profile.create",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["tx.user.create",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["type",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/I18nException.html":{},"injectables/I18nInterceptor.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1015,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["typeddata",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["typeddata.domain",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["typeddata.message",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["typeddata.primarytype",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["typeddata.types",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["typeof",{"_index":508,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["types",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["uint256",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception",{"_index":217,"title":{},"body":{"guards/AuthGuard.html":{}}}],["unauthorizedexception('invalid",{"_index":259,"title":{},"body":{"guards/AuthGuard.html":{}}}],["undefined",{"_index":388,"title":{},"body":{"classes/CreateNonceDto.html":{},"classes/PatchUserProfileDto.html":{}}}],["undefined})@isnotempty",{"_index":634,"title":{},"body":{"classes/LoginDto.html":{}}}],["undefined})@isoptional",{"_index":485,"title":{},"body":{"classes/GetQuestsFilterDto.html":{}}}],["unique_user_quest",{"_index":725,"title":{},"body":{"injectables/QuestService.html":{}}}],["unique_user_task",{"_index":736,"title":{},"body":{"injectables/QuestService.html":{}}}],["unit",{"_index":991,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"injectables/RedisService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1014,"title":{},"body":{"properties.html":{}}}],["up",{"_index":980,"title":{},"body":{"index.html":{}}}],["update",{"_index":748,"title":{},"body":{"injectables/QuestService.html":{}}}],["updateprofile",{"_index":817,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofile(user",{"_index":826,"title":{},"body":{"controllers/UserController.html":{}}}],["url",{"_index":578,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/TaskContent.html":{}}}],["useclass",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":784,"title":{},"body":{"modules/RedisModule.html":{}}}],["useguards",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"controllers/LeaderboardController.html":{},"controllers/QuestController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/EasyTestService.html":{},"interfaces/JwtPayload.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"classes/PatchUserProfileDto.html":{},"controllers/QuestController.html":{},"injectables/QuestService.html":{},"interfaces/TaskContent.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.controller",{"_index":843,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["user.point",{"_index":622,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["user.service",{"_index":832,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.user.nickname",{"_index":621,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["user.walletaddress",{"_index":741,"title":{},"body":{"injectables/QuestService.html":{}}}],["usercontroller",{"_index":812,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LeaderboardService.html":{},"injectables/QuestService.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":47,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userqueststatus",{"_index":723,"title":{},"body":{"injectables/QuestService.html":{}}}],["userqueststatus.clearedtaskcount",{"_index":762,"title":{},"body":{"injectables/QuestService.html":{}}}],["userqueststatus.status",{"_index":726,"title":{},"body":{"injectables/QuestService.html":{}}}],["userrank",{"_index":607,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["userservice",{"_index":831,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertaskstatus",{"_index":734,"title":{},"body":{"injectables/QuestService.html":{}}}],["userwalletaddress",{"_index":699,"title":{},"body":{"injectables/QuestService.html":{},"miscellaneous/functions.html":{}}}],["utf8",{"_index":1026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utility",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QuestService.html":{}}}],["utils",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/QuestService.html":{}}}],["valid",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate(value",{"_index":1043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validatenested",{"_index":480,"title":{},"body":{"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{}}}],["validatenested()@type(undefined",{"_index":471,"title":{},"body":{"classes/GetQuestsDto.html":{}}}],["validateregisteredjwt",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{}}}],["validateregisteredjwt(path",{"_index":210,"title":{},"body":{"guards/AuthGuard.html":{}}}],["validationarguments",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationoptions",{"_index":1038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validator",{"_index":380,"title":{},"body":{"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"classes/GetQuestsFilterDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/PatchUserProfileDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["validator/isethtxhash.decorator.ts",{"_index":873,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["validator/isethwallet.decorator",{"_index":383,"title":{},"body":{"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"classes/LoginDto.html":{}}}],["validator/isethwallet.decorator.ts",{"_index":875,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DatabaseService.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetQuestsDto.html":{},"injectables/LeaderboardService.html":{},"classes/PaginationDto.html":{},"injectables/RedisService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":871,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1018,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["verify.end",{"_index":1036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verify.update(plainmessage",{"_index":1035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verify.verify(publickey",{"_index":1037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verifysignaturewithrsapublickey",{"_index":903,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["verifysigntypeddata",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifysigntypeddata(walletaddress",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifytypeddata",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"properties.html":{}}}],["viem",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["vincent",{"_index":1001,"title":{},"body":{"index.html":{}}}],["wallet",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["walletaddress",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConnectWalletDto.html":{},"classes/CreateNonceDto.html":{},"controllers/EasyTestController.html":{},"injectables/EasyTestService.html":{},"classes/LoginDto.html":{}}}],["walletaddress.tolowercase",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EasyTestService.html":{}}}],["warn",{"_index":420,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["watch",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["wherecluster",{"_index":704,"title":{},"body":{"injectables/QuestService.html":{}}}],["wherecluster.title",{"_index":707,"title":{},"body":{"injectables/QuestService.html":{}}}],["x19ethereum",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["yarn",{"_index":969,"title":{},"body":{"index.html":{}}}],["yes",{"_index":950,"title":{},"body":{"miscellaneous/functions.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EasyTestModule.html":{},"modules/LeaderboardModule.html":{},"modules/QuestModule.html":{},"modules/RedisModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHealth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHealth\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHealth()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('health')\n  getHealth(): boolean {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEasyTestModule\n\nEasyTestModule\n\nAppModule -->\n\nEasyTestModule->AppModule\n\n\n\n\n\nLeaderboardModule\n\nLeaderboardModule\n\nAppModule -->\n\nLeaderboardModule->AppModule\n\n\n\n\n\nQuestModule\n\nQuestModule\n\nAppModule -->\n\nQuestModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EasyTestModule\n                        \n                        \n                            LeaderboardModule\n                        \n                        \n                            QuestModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_FILTER, APP_GUARD } from '@nestjs/core';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { DatabaseModule } from '@providers/database/database.module';\nimport { RedisModule } from '@providers/redis/redis.module';\nimport {\n  AcceptLanguageResolver,\n  HeaderResolver,\n  I18nModule,\n} from 'nestjs-i18n';\nimport { join } from 'path';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { HttpExceptionFilter } from './commons/filters/http-exception.filter';\nimport { EasyTestModule } from './easy-test/easy-test.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { LeaderboardModule } from './modules/leaderboard/leaderboard.module';\nimport { QuestModule } from './modules/quest/quest.module';\nimport { UserModule } from './modules/user/user.module';\nimport { getRSAServerKeyPair } from './utils';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({}),\n    ThrottlerModule.forRoot({}),\n    I18nModule.forRoot({\n      fallbackLanguage: 'en',\n      loaderOptions: {\n        path: join(__dirname, '/i18n/'),\n        watch: true,\n      },\n      resolvers: [new HeaderResolver(['x-lang']), AcceptLanguageResolver],\n    }),\n\n    DatabaseModule,\n    RedisModule,\n\n    EasyTestModule,\n\n    AuthModule,\n    QuestModule,\n    UserModule,\n    LeaderboardModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_FILTER,\n      useClass: HttpExceptionFilter,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n  ],\n})\nexport class AppModule {\n  constructor() {\n    const { encodedPublicKey, rawPublicKey, rawPrivateKey } =\n      getRSAServerKeyPair();\n    process.env.ENCODED_PUBLIC_KEY = encodedPublicKey;\n    process.env.RAW_PUBLIC_KEY = rawPublicKey;\n    process.env.RAW_PRIVATE_KEY = rawPrivateKey;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:4\n                            \n                        \n\n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  constructor() {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getNonce\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                getServerPubkey\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getNonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNonce(body: CreateNonceDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nonce')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            CreateNonceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getServerPubkey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getServerPubkey()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('server-pubkey')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(body: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(user: AuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('logout')@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { User } from 'src/commons/decorators/request/user.decorator';\nimport { AuthGuard } from 'src/commons/guards/auth.guard';\nimport { AuthUser } from 'src/types';\nimport { AuthService } from './auth.service';\nimport { CreateNonceDto } from './dtos/create-nonce.dto';\nimport { LoginDto } from './dtos/login.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Patch('login')\n  async login(@Body() body: LoginDto) {\n    const { walletAddress, signature } = body;\n\n    const nonce = await this.authService.getNonce(walletAddress);\n    const isWalletVerified = await this.authService.verifySignTypedData(\n      walletAddress as `0x${string}`,\n      signature as `0x${string}`,\n      nonce,\n    );\n\n    if (!isWalletVerified) {\n      throw new BadRequestException('Invalid signature');\n    }\n\n    return this.authService.login(walletAddress);\n  }\n\n  @Delete('logout')\n  @UseGuards(AuthGuard)\n  public async logout(@User() user: AuthUser) {\n    return await this.authService.logout(user.id);\n  }\n\n  @Post('nonce')\n  async getNonce(@Body() body: CreateNonceDto) {\n    const { walletAddress } = body;\n    return this.authService.createNonce(walletAddress);\n  }\n\n  @Get('server-pubkey')\n  public async getServerPubkey() {\n    return process.env.RAW_PUBLIC_KEY;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/commons/guards/auth.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    인증이 필요한 API 에 대한 Guard 입니다.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                checkPublicAPI\n                            \n                            \n                                    Private\n                                    Async\n                                checkUserByPayloadData\n                            \n                            \n                                    Private\n                                extractTokenFromHeader\n                            \n                            \n                                    Private\n                                    Async\n                                getPayloadFromJwt\n                            \n                            \n                                    Private\n                                    Async\n                                validateRegisteredJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, redisService: RedisService, databaseService: DatabaseService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/commons/guards/auth.guard.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commons/guards/auth.guard.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkPublicAPI\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkPublicAPI(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commons/guards/auth.guard.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkUserByPayloadData\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkUserByPayloadData(jwtPayload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commons/guards/auth.guard.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                jwtPayload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractTokenFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractTokenFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commons/guards/auth.guard.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getPayloadFromJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPayloadFromJwt(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commons/guards/auth.guard.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        validateRegisteredJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateRegisteredJWT(path: string, payload: JwtPayload, requestedToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commons/guards/auth.guard.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestedToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  BadRequestException,\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { user } from '@prisma/db';\nimport { DatabaseService } from '@providers/database/database.service';\nimport { RedisService } from '@providers/redis/redis.service';\nimport { Request } from 'express';\nimport { JwtPayload } from 'src/types';\n\n/**\n * @summary\n * 인증이 필요한 API 에 대한 Guard 입니다.\n */\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly redisService: RedisService,\n    private readonly databaseService: DatabaseService,\n    private readonly reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const path = request.path;\n    // const method = request.method.toUpperCase();\n\n    const token = this.extractTokenFromHeader(request);\n\n    if (this.checkPublicAPI(context)) {\n      return true;\n    }\n\n    if (!token) {\n      throw new BadRequestException('error.NO_AUTH_TOKEN');\n    }\n\n    const payload: JwtPayload = await this.getPayloadFromJwt(token);\n\n    await this.validateRegisteredJWT(path, payload, token);\n\n    // Check if user exists\n    const user: Partial = await this.checkUserByPayloadData(payload);\n\n    // Inject user data into request\n    request['parsedPayload'] = { originalJwtPayload: payload, user, token };\n\n    return true;\n  }\n\n  private checkPublicAPI(context: ExecutionContext): boolean {\n    const isPublic: [] = this.reflector.getAll('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic.find(() => true)) {\n      return true;\n    }\n  }\n\n  private extractTokenFromHeader(request: Request): string | null {\n    const auth = request.headers.authorization;\n\n    if (!auth) {\n      return null;\n    }\n\n    const [type, token] = auth.split(' ');\n    const parsedToken = type === 'Bearer' ? token : null;\n\n    return parsedToken;\n  }\n\n  private async getPayloadFromJwt(token: string): Promise {\n    try {\n      return await this.jwtService.verifyAsync(token, {\n        secret: process.env.JWT_SECRET,\n        ignoreExpiration: false,\n      });\n    } catch (error) {\n      throw new UnauthorizedException('Invalid or expired token');\n    }\n  }\n\n  private async checkUserByPayloadData(jwtPayload: JwtPayload) {\n    // Check if user exists\n    const user: user = await this.databaseService.user.findUnique({\n      where: {\n        id: jwtPayload.aud,\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  private async validateRegisteredJWT(\n    path: string,\n    payload: JwtPayload,\n    requestedToken: string,\n  ) {\n    let existJwt: string;\n    try {\n      existJwt = await this.redisService.get(`auth:user:${payload.aud}`);\n\n      if (!existJwt) {\n        if (path === '/auth/logout') {\n          return;\n        } else {\n          throw new UnauthorizedException('Invalid or expired token');\n        }\n      }\n    } catch (error: unknown) {\n      if (error instanceof HttpException) {\n        throw error;\n      }\n\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n\n    if (existJwt !== requestedToken) {\n      throw new UnauthorizedException('Invalid or expired token');\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [\n    JwtModule.register({\n      global: true,\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: Number(process.env.JWT_EXPIRE_TIME) },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createNonce\n                            \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Public\n                                    Async\n                                getNonce\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                logout\n                            \n                            \n                                    Public\n                                    Async\n                                verifySignTypedData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, redisService: RedisService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createNonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    createNonce(walletAddress: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                walletAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                nonceString\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(user: user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        user\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getNonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNonce(walletAddress: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                walletAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                nonceString\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(walletAddress: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                walletAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                accessToken\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        verifySignTypedData\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifySignTypedData(walletAddress: template literal type, signature: template literal type, nonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                walletAddress\n                                            \n                                                        template literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                        template literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                nonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { user } from '@prisma/db';\nimport { DatabaseService } from '@providers/database/database.service';\nimport { RedisService } from '@providers/redis/redis.service';\nimport { hash } from 'crypto';\nimport { makeRandomAlphaNumericString } from 'src/utils';\nimport { verifyTypedData } from 'viem';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly redisService: RedisService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /**\n   * @description Login or Register with the wallet address and signature\n   * @param walletAddress\n   * @returns accessToken\n   */\n  public async login(walletAddress: string) {\n    let user = await this.databaseService.user.findUnique({\n      where: {\n        walletAddress,\n      },\n    });\n\n    if (!user) {\n      try {\n        user = await this.databaseService.$transaction(async (tx) => {\n          const user = await tx.user.create({\n            data: {\n              nickname: walletAddress.toLowerCase(),\n              walletAddress,\n            },\n          });\n\n          tx.leaderboard.create({\n            data: {\n              userId: user.id,\n            },\n          });\n\n          tx.profile.create({\n            data: {\n              userId: user.id,\n            },\n          });\n\n          return user;\n        });\n      } catch (err) {\n        console.error(err);\n        throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n      }\n    }\n\n    const accessToken = await this.generateAccessToken(user);\n\n    return {\n      accessToken,\n    };\n  }\n\n  /**\n   * @description Logout the user\n   * @param userId\n   * @returns\n   */\n  public async logout(userId: string) {\n    try {\n      await this.redisService.del(`auth:user:${userId}`);\n    } catch (err) {\n      return;\n    }\n  }\n\n  /**\n   * @description Create a nonce for the wallet address\n   * @param walletAddress\n   * @returns nonceString\n   */\n  public async createNonce(walletAddress: string): Promise {\n    const randomStr: string = hash(\n      'sha256',\n      Date.now().toString() + makeRandomAlphaNumericString(6),\n    );\n\n    const value: string =\n      '\\x19Ethereum Signed Message:\\n' + randomStr.length + randomStr;\n\n    try {\n      await this.redisService.set(`nonce:${walletAddress}`, value, 60);\n    } catch (err) {\n      console.error(err);\n      throw new InternalServerErrorException('Error while creating nonce');\n    }\n\n    return value;\n  }\n\n  /**\n   * @description Get the nonce for the wallet address\n   * @param walletAddress\n   * @returns nonceString\n   */\n  public async getNonce(walletAddress: string) {\n    try {\n      const nonce = await this.redisService.get(`nonce:${walletAddress}`);\n      return nonce;\n    } catch (err) {\n      console.error(err);\n      throw new InternalServerErrorException('Error while getting nonce');\n    }\n  }\n\n  /**\n   * @description Verify the signature of the wallet address with typed data\n   * @param walletAddress\n   * @param signature\n   * @param nonce\n   * @returns boolean\n   */\n  public async verifySignTypedData(\n    walletAddress: `0x${string}`,\n    signature: `0x${string}`,\n    nonce: string,\n  ): Promise {\n    const typedData = {\n      types: {\n        EIP712Domain: [\n          { name: 'name', type: 'string' },\n          { name: 'version', type: 'string' },\n          { name: 'chainId', type: 'uint256' },\n        ],\n        Verify: [\n          { name: 'from', type: 'address' },\n          { name: 'nonce', type: 'string' },\n        ],\n      },\n      primaryType: 'Verify',\n      domain: {\n        name: 'TestSCM',\n        chainId: BigInt(1001),\n        version: '1.0',\n      },\n      message: {\n        from: walletAddress,\n        nonce,\n      },\n    } as const;\n\n    const isFromValid = await verifyTypedData({\n      signature,\n      address: walletAddress,\n      types: typedData.types,\n      primaryType: typedData.primaryType,\n      message: typedData.message,\n      domain: typedData.domain,\n    });\n\n    return isFromValid;\n  }\n\n  // Utility functions\n  private async generateAccessToken(user: user): Promise {\n    const payload = {\n      iss: 'IF_LABS_SERVER',\n      aud: user.id,\n    };\n    const jwt: string = this.jwtService.sign(payload);\n\n    await this.redisService.set(\n      `auth:user:${user.id}`,\n      jwt,\n      Number(process.env.JWT_EXPIRE_TIME),\n    );\n\n    return jwt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConnectWalletDto.html":{"url":"classes/ConnectWalletDto.html","title":"class - ConnectWalletDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConnectWalletDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/dtos/connectWallet.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                signature\n                            \n                            \n                                    \n                                    \n                                    \n                                walletAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/dtos/connectWallet.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        walletAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEthWalletAddress()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/dtos/connectWallet.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { IsEthWalletAddress } from '../decorators/class-validator/isEthWallet.decorator';\n\n/**\n * @summary 사용자 지갑 연결 DTO\n */\nexport class ConnectWalletDto {\n  @IsString()\n  @IsNotEmpty()\n  signature: string;\n\n  @IsString()\n  @IsEthWalletAddress()\n  @IsNotEmpty()\n  walletAddress: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNonceDto.html":{"url":"classes/CreateNonceDto.html","title":"class - CreateNonceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNonceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/create-nonce.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                walletAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        walletAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEthWalletAddress({message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/create-nonce.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { IsEthWalletAddress } from 'src/commons/decorators/class-validator/isEthWallet.decorator';\n\nexport class CreateNonceDto {\n  @IsNotEmpty()\n  @IsEthWalletAddress({\n    message: i18nValidationMessage('validation.IS_ETH_WALLET_ADDRESS', {\n      args: { property: 'walletAddress' },\n    }),\n  })\n  walletAddress: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_DatabaseModule_exports\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/providers/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { DatabaseService } from './database.service';\n\n@Global()\n@Module({\n  imports: [],\n  providers: [DatabaseService],\n  exports: [DatabaseService],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/database/database.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                disconnect\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/providers/database/database.service.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    disconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/database/database.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/database/database.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/database/database.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('DatabaseService')\n                    \n                \n                    \n                        \n                                Defined in src/providers/database/database.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Logger,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { Prisma, PrismaClient } from '@prisma/db';\n\n@Injectable()\nexport class DatabaseService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  private logger = new Logger('DatabaseService');\n  constructor() {\n    super({\n      log: [\n        // {\n        //   emit: 'event',\n        //   level: 'query',\n        // },\n        {\n          emit: 'event',\n          level: 'error',\n        },\n        // {\n        //   emit: 'event',\n        //   level: 'info',\n        // },\n        // {\n        //   emit: 'event',\n        //   level: 'warn',\n        // },\n      ],\n    });\n  }\n\n  async onModuleInit() {\n    this.$on('error', (event) => {\n      this.logger.error(event);\n    });\n    this.$on('warn', (event) => {\n      this.logger.warn(event);\n    });\n    this.$on('info', (event) => {\n      this.logger.verbose(event);\n    });\n    this.$on('query', (event) => {\n      this.logger.log(event);\n    });\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async disconnect() {\n    await this.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EasyTestController.html":{"url":"controllers/EasyTestController.html","title":"controller - EasyTestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EasyTestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/easy-test/easy-test.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                easy-test\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(walletAddress: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('login')\n                \n            \n\n                    \n                        \n                            Defined in src/easy-test/easy-test.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                walletAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query } from '@nestjs/common';\nimport { EasyTestService } from './easy-test.service';\n\n@Controller('easy-test')\nexport class EasyTestController {\n  constructor(private readonly easyTestService: EasyTestService) {}\n\n  @Get('login')\n  public async login(@Query('walletAddress') walletAddress: string) {\n    return await this.easyTestService.login(walletAddress);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EasyTestModule.html":{"url":"modules/EasyTestModule.html","title":"module - EasyTestModule","body":"\n                   \n\n\n\n\n    Modules\n    EasyTestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EasyTestModule\n\n\n\ncluster_EasyTestModule_providers\n\n\n\n\nEasyTestService\n\nEasyTestService\n\n\n\nEasyTestModule\n\nEasyTestModule\n\nEasyTestModule -->\n\nEasyTestService->EasyTestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/easy-test/easy-test.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EasyTestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EasyTestController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EasyTestController } from './easy-test.controller';\nimport { EasyTestService } from './easy-test.service';\n\n@Module({\n  controllers: [EasyTestController],\n  providers: [EasyTestService],\n})\nexport class EasyTestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EasyTestService.html":{"url":"injectables/EasyTestService.html","title":"injectable - EasyTestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EasyTestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/easy-test/easy-test.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, redisService: RedisService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/easy-test/easy-test.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(user: user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/easy-test/easy-test.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                        user\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(walletAddress: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/easy-test/easy-test.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                walletAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { user } from '@prisma/db';\nimport { DatabaseService } from '@providers/database/database.service';\nimport { RedisService } from '@providers/redis/redis.service';\n\n@Injectable()\nexport class EasyTestService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly redisService: RedisService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  public async login(walletAddress: string) {\n    const user: user = await this.databaseService.user.findUnique({\n      where: {\n        walletAddress: walletAddress.toLowerCase(),\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return await this.generateAccessToken(user);\n  }\n\n  private async generateAccessToken(user: user): Promise {\n    const payload = {\n      iss: 'IF_LABS_SERVER',\n      aud: user.id,\n    };\n    const jwt: string = this.jwtService.sign(payload);\n\n    await this.redisService.set(\n      `auth:user:${user.id}`,\n      jwt,\n      Number(process.env.JWT_EXPIRE_TIME),\n    );\n\n    return jwt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetLeaderboardDto.html":{"url":"classes/GetLeaderboardDto.html","title":"class - GetLeaderboardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetLeaderboardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/leaderboard/dtos/get-leaderboard.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 50\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/leaderboard/dtos/get-leaderboard.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional, Max, Min } from 'class-validator';\n\nexport class GetLeaderboardDto {\n  @IsOptional()\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  size?: number = 50;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetQuestsDto.html":{"url":"classes/GetQuestsDto.html","title":"class - GetQuestsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetQuestsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quest/dtos/get-quests.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PaginationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                filter\n                            \n                            \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        filter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GetQuestsFilterDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quest/dtos/get-quests.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDto:15\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional, IsString, ValidateNested } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { PaginationDto } from 'src/commons/dtos/pagination.dto';\n\nexport class GetQuestsFilterDto {\n  @IsString({\n    message: i18nValidationMessage('validation.IS_STRING', {\n      args: { property: 'title' },\n    }),\n  })\n  @IsOptional()\n  title: string;\n}\n\nexport class GetQuestsDto extends PaginationDto {\n  @ValidateNested()\n  @Type(() => GetQuestsFilterDto)\n  filter: GetQuestsFilterDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetQuestsFilterDto.html":{"url":"classes/GetQuestsFilterDto.html","title":"class - GetQuestsFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetQuestsFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quest/dtos/get-quests.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/quest/dtos/get-quests.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsOptional, IsString, ValidateNested } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { PaginationDto } from 'src/commons/dtos/pagination.dto';\n\nexport class GetQuestsFilterDto {\n  @IsString({\n    message: i18nValidationMessage('validation.IS_STRING', {\n      args: { property: 'title' },\n    }),\n  })\n  @IsOptional()\n  title: string;\n}\n\nexport class GetQuestsDto extends PaginationDto {\n  @ValidateNested()\n  @Type(() => GetQuestsFilterDto)\n  filter: GetQuestsFilterDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/filters/http-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(i18n: I18nService)\n                    \n                \n                        \n                            \n                                Defined in src/commons/filters/http-exception.filter.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        i18n\n                                                  \n                                                        \n                                                                    I18nService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        catch\n                        \n                    \n                \n            \n            \n                \n                        \n                    catch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commons/filters/http-exception.filter.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { I18nService } from 'nestjs-i18n';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  constructor(private readonly i18n: I18nService) {}\n  async catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const status = exception.getStatus();\n    const error = exception.getResponse() as any;\n\n    response.statusMessage =\n      typeof error === 'object' && typeof error.message === 'string'\n        ? error.message\n        : (response.statusMessage = JSON.stringify(error));\n\n    if (typeof error === 'string') {\n      try {\n        // Logic for I18nException\n        const parsedError = JSON.parse(error);\n\n        if (parsedError.hasOwnProperty('isI18nError')) {\n          const message = parsedError['message'];\n          const args = parsedError['args'];\n\n          response.status(status).send({\n            statusCode: status,\n            message: await this.i18n.t(message, JSON.parse(args)),\n            timestamp: new Date().toISOString(),\n            path: request.url,\n          });\n        }\n      } catch (err) {\n        // Logic for normal string exception\n        response.status(status).json({\n          statusCode: status,\n          message: this.i18n.t(error) || error,\n          timestamp: new Date().toISOString(),\n          path: request.url,\n        });\n      }\n    }\n\n    if (error.hasOwnProperty('error')) {\n      if (error.error) {\n        const errorStackLines = error.error.split('\\n');\n        if (errorStackLines.length > 1) {\n          let parsedErrorStack: string = '';\n          for (const line of errorStackLines) {\n            parsedErrorStack += '\\n' + line.trim();\n          }\n          response['parsedErrorStack'] = parsedErrorStack;\n        }\n      }\n\n      error.message =\n        typeof error.message === 'string' ? error.message : error.message[0];\n\n      response.status(status).send({\n        statusCode: status,\n        message: this.i18n.t(error.message) || error.message,\n        timestamp: new Date().toISOString(),\n        path: request.url,\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/I18nException.html":{"url":"classes/I18nException.html","title":"class - I18nException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  I18nException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/classes/i18n.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        HttpException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(arg: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/commons/classes/i18n.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        arg\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException } from '@nestjs/common';\n\nexport class I18nException extends HttpException {\n  constructor(arg: {\n    message: string;\n    args: string;\n    isI18nError: boolean;\n    status: number;\n  }) {\n    super(JSON.stringify(arg), arg.status);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/I18nInterceptor.html":{"url":"injectables/I18nInterceptor.html","title":"injectable - I18nInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  I18nInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/interceptors/i18n.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/commons/interceptors/i18n.interceptor.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable } from 'rxjs';\nimport { I18nException } from '../classes/i18n.exception';\n\n@Injectable()\nexport class I18nInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      catchError(async (err) => {\n        const error = err.response;\n        const errorMessage: string | string[] = error.message;\n        const parsedErrorMessage = Array.isArray(errorMessage)\n          ? errorMessage[0]\n          : errorMessage;\n\n        if (parsedErrorMessage.includes('|')) {\n          const [message, args] = parsedErrorMessage.split('|');\n          error.message = message;\n\n          throw new I18nException({\n            message,\n            args,\n            isI18nError: true,\n            status: error.statusCode,\n          });\n        }\n\n        throw err;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aud\n                                        \n                                \n                                \n                                        \n                                            exp\n                                        \n                                \n                                \n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            iss\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aud\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aud:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iss\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iss:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { user } from '@prisma/db';\n\nexport interface JwtPayload {\n  iss: string;\n  sub: string;\n  aud: string;\n  iat: number;\n  exp: number;\n}\n\nexport type AuthUser = Partial;\n\nexport interface TaskContent {\n  [key: string]: any;\n  url: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LeaderboardController.html":{"url":"controllers/LeaderboardController.html","title":"controller - LeaderboardController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LeaderboardController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/leaderboard/leaderboard.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                leaderboard\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getLeaderboard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        getLeaderboard\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLeaderboard(query: GetLeaderboardDto, user: AuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/leaderboard/leaderboard.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetLeaderboardDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Query, UseGuards } from '@nestjs/common';\nimport { User } from 'src/commons/decorators/request/user.decorator';\nimport { AuthGuard } from 'src/commons/guards/auth.guard';\nimport { AuthUser } from 'src/types';\nimport { GetLeaderboardDto } from './dtos/get-leaderboard.dto';\nimport { LeaderboardService } from './leaderboard.service';\n\n@Controller('leaderboard')\nexport class LeaderboardController {\n  constructor(private readonly leaderboardService: LeaderboardService) {}\n\n  @Get()\n  @UseGuards(AuthGuard)\n  public async getLeaderboard(\n    @Query() query: GetLeaderboardDto,\n    @User() user: AuthUser,\n  ) {\n    return await this.leaderboardService.getLeaderboard(user.id, query.size);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LeaderboardModule.html":{"url":"modules/LeaderboardModule.html","title":"module - LeaderboardModule","body":"\n                   \n\n\n\n\n    Modules\n    LeaderboardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LeaderboardModule\n\n\n\ncluster_LeaderboardModule_providers\n\n\n\n\nLeaderboardService\n\nLeaderboardService\n\n\n\nLeaderboardModule\n\nLeaderboardModule\n\nLeaderboardModule -->\n\nLeaderboardService->LeaderboardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/leaderboard/leaderboard.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LeaderboardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LeaderboardController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LeaderboardController } from './leaderboard.controller';\nimport { LeaderboardService } from './leaderboard.service';\n\n@Module({\n  controllers: [LeaderboardController],\n  providers: [LeaderboardService],\n})\nexport class LeaderboardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LeaderboardService.html":{"url":"injectables/LeaderboardService.html","title":"injectable - LeaderboardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LeaderboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/leaderboard/leaderboard.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getLeaderboard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/leaderboard/leaderboard.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getLeaderboard\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLeaderboard(userId: string, size: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/leaderboard/leaderboard.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                size\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    50\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { DatabaseService } from '@providers/database/database.service';\nimport { RedisService } from '@providers/redis/redis.service';\n\n@Injectable()\nexport class LeaderboardService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly redisService: RedisService,\n  ) {}\n\n  public async getLeaderboard(userId: string, size: number = 50) {\n    try {\n      const cachedLeaderboard = await this.redisService.get(`leaderboard`);\n      const cachedUserRank = await this.redisService.get(\n        `leaderboard:${userId}`,\n      );\n\n      if (cachedLeaderboard && cachedUserRank) {\n        return {\n          leaderboard: JSON.parse(cachedLeaderboard),\n          userRank: JSON.parse(cachedUserRank),\n        };\n      }\n    } catch (err) {\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n\n    try {\n      const leaderboard = await this.databaseService.leaderboard.findMany({\n        skip: 0,\n        take: size,\n        orderBy: {\n          point: 'desc',\n        },\n        include: {\n          user: {\n            select: {\n              nickname: true,\n            },\n          },\n        },\n      });\n\n      const parsedLeaderboard = leaderboard.map((user, index) => {\n        return {\n          rank: index + 1,\n          nickname: user.user.nickname,\n          point: user.point,\n        };\n      });\n\n      await this.redisService.set(\n        `leaderboard`,\n        JSON.stringify(parsedLeaderboard),\n        3600,\n      );\n\n      const rank = await this.databaseService.$queryRaw`\n        WITH RankedUsers AS (\n            SELECT \"userId\", point, \n                  RANK() OVER (ORDER BY point DESC) AS rank\n            FROM leaderboard\n        )\n        SELECT rank FROM RankedUsers WHERE \"userId\" = ${userId};\n  `;\n      const userRank = (rank[0] ? rank[0]?.rank : '-').toString();\n\n      await this.redisService.set(\n        `leaderboard:${userId}`,\n        JSON.stringify(userRank),\n        3600,\n      );\n\n      return {\n        leaderboard: parsedLeaderboard,\n        userRank,\n      };\n    } catch (err) {\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                signature\n                            \n                            \n                                    \n                                    \n                                walletAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        signature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: undefined})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        walletAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEthWalletAddress({message: undefined})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\nimport { IsEthWalletAddress } from 'src/commons/decorators/class-validator/isEthWallet.decorator';\n\nexport class LoginDto {\n  @IsEthWalletAddress({\n    message: i18nValidationMessage('validation.IS_ETH_WALLET_ADDRESS', {\n      args: { property: 'walletAddress' },\n    }),\n  })\n  @IsNotEmpty()\n  walletAddress: string;\n\n  @IsString({\n    message: i18nValidationMessage('validation.IS_STRING', {\n      args: { property: 'signature' },\n    }),\n  })\n  @IsNotEmpty()\n  signature: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/dtos/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                size\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/dtos/pagination.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@Min(1)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/dtos/pagination.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, Min } from 'class-validator';\n\n/**\n * @summary 페이지네이션 DTO\n */\nexport class PaginationDto {\n  @IsInt()\n  @Min(1)\n  @IsNotEmpty()\n  page: number = 1;\n\n  @IsInt()\n  @Min(1)\n  @IsNotEmpty()\n  size: number = 10;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserProfileDto.html":{"url":"classes/PatchUserProfileDto.html","title":"class - PatchUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dtos/patch-user-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                interests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true, message: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/user/dtos/patch-user-profile.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\nimport { i18nValidationMessage } from 'nestjs-i18n';\n\nexport class PatchUserProfileDto {\n  @IsString({\n    each: true,\n    message: i18nValidationMessage('validation.IS_STRING_ARRAY', {\n      args: { property: 'interests' },\n    }),\n  })\n  interests: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestController.html":{"url":"controllers/QuestController.html","title":"controller - QuestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quest/quest.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                quests\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                finishQuestTask\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                getQuest\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                getQuests\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Async\n                                getQuestUserStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        finishQuestTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    finishQuestTask(user: AuthUser, questId: string, taskId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':questId/tasks/:taskId/check')@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/quest/quest.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                questId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getQuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQuest(questId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':questId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/quest/quest.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                questId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getQuests\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQuests(query: GetQuestsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/quest/quest.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            GetQuestsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Async\n                        getQuestUserStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQuestUserStatus(user: AuthUser, questId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':questId/userStatus')@UseGuards(AuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/quest/quest.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                questId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post, Query, UseGuards } from '@nestjs/common';\nimport { User } from 'src/commons/decorators/request/user.decorator';\nimport { AuthGuard } from 'src/commons/guards/auth.guard';\nimport { AuthUser } from 'src/types';\nimport { GetQuestsDto } from './dtos/get-quests.dto';\nimport { QuestService } from './quest.service';\n\n@Controller('quests')\nexport class QuestController {\n  constructor(private readonly questService: QuestService) {}\n\n  @Get()\n  public async getQuests(@Query() query: GetQuestsDto) {\n    const { page, size, filter } = query;\n    return await this.questService.getQuests(page, size, filter);\n  }\n\n  @Get(':questId')\n  public async getQuest(@Param('questId') questId: string) {\n    return await this.questService.getQuest(questId);\n  }\n\n  @Get(':questId/userStatus')\n  @UseGuards(AuthGuard)\n  public async getQuestUserStatus(\n    @User() user: AuthUser,\n    @Param('questId') questId: string,\n  ) {\n    return await this.questService.getQuestUserStatus(user.id, questId);\n  }\n\n  @Post(':questId/tasks/:taskId/check')\n  @UseGuards(AuthGuard)\n  public async finishQuestTask(\n    @User() user: AuthUser,\n    @Param('questId') questId: string,\n    @Param('taskId') taskId: string,\n  ) {\n    return await this.questService.finishQuestTask(user.id, questId, taskId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestModule.html":{"url":"modules/QuestModule.html","title":"module - QuestModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestModule\n\n\n\ncluster_QuestModule_providers\n\n\n\n\nQuestService\n\nQuestService\n\n\n\nQuestModule\n\nQuestModule\n\nQuestModule -->\n\nQuestService->QuestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/quest/quest.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestController } from './quest.controller';\nimport { QuestService } from './quest.service';\n\n@Module({\n  controllers: [QuestController],\n  providers: [QuestService],\n})\nexport class QuestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestService.html":{"url":"injectables/QuestService.html","title":"injectable - QuestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QuestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/quest/quest.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                finishQuestTask\n                            \n                            \n                                    Public\n                                    Async\n                                getQuest\n                            \n                            \n                                    Public\n                                    Async\n                                getQuests\n                            \n                            \n                                    Public\n                                    Async\n                                getQuestUserStatus\n                            \n                            \n                                    Private\n                                    Async\n                                handleTaskFinish\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/quest/quest.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                        RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        finishQuestTask\n                        \n                    \n                \n            \n            \n                \n                        \n                    finishQuestTask(userId: string, questId: string, taskId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/quest/quest.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                questId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                taskId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getQuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQuest(questId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/quest/quest.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                questId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getQuests\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQuests(page: number, size: number, filter: object)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/quest/quest.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                size\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getQuestUserStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQuestUserStatus(questId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/quest/quest.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                questId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        handleTaskFinish\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleTaskFinish(task: task, userWalletAddress: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/quest/quest.service.ts:260\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                        task\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userWalletAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  HttpException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { Prisma, quest, task, user } from '@prisma/db';\nimport { DatabaseService } from '@providers/database/database.service';\nimport { RedisService } from '@providers/redis/redis.service';\nimport { TaskContent } from 'src/types';\nimport { taskApiCall } from './utils';\n\n@Injectable()\nexport class QuestService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly redisService: RedisService,\n  ) {}\n\n  public async getQuests(page: number, size: number, filter: object) {\n    const whereCluster: Prisma.questFindManyArgs['where'] = {};\n\n    if (filter) {\n      if (filter['title']) {\n        whereCluster.title = {\n          contains: filter['title'],\n        };\n      }\n    }\n\n    try {\n      const [count, list] = await this.databaseService.$transaction([\n        this.databaseService.quest.count({ where: whereCluster }),\n        this.databaseService.quest.findMany({\n          where: whereCluster,\n          skip: (page - 1) * size,\n          take: size,\n        }),\n      ]);\n\n      const response = {\n        count,\n        list,\n      };\n\n      return response;\n    } catch (err) {\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n  }\n\n  public async getQuest(questId: string) {\n    const cachedQuest = await this.redisService.get(`quest:${questId}`);\n\n    if (cachedQuest) {\n      return JSON.parse(cachedQuest);\n    }\n\n    try {\n      const quest = await this.databaseService.quest.findUnique({\n        where: {\n          id: questId,\n        },\n        include: {\n          tasks: true,\n        },\n      });\n\n      if (!quest) {\n        throw new BadRequestException('error.QUEST_NOT_FOUND');\n      }\n\n      await this.redisService.set(\n        `quest:${questId}`,\n        JSON.stringify(quest),\n        86400,\n      );\n\n      return quest;\n    } catch (err) {\n      if (err instanceof HttpException) {\n        throw err;\n      }\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n  }\n\n  public async getQuestUserStatus(questId: string, userId: string) {\n    try {\n      const userQuestStatus =\n        await this.databaseService.userQuestStatus.findUnique({\n          where: {\n            unique_user_quest: {\n              userId,\n              questId,\n            },\n          },\n        });\n\n      return userQuestStatus\n        ? { status: userQuestStatus.status }\n        : { status: false };\n    } catch (err) {\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n  }\n\n  public async finishQuestTask(\n    userId: string,\n    questId: string,\n    taskId: string,\n  ) {\n    let user: user;\n    let quest: quest & { tasks: task[] };\n    let task: task;\n\n    // Fetch user, quest and task\n    try {\n      user = await this.databaseService.user.findUnique({\n        where: {\n          id: userId,\n        },\n      });\n\n      if (!user) {\n        throw new BadRequestException('error.USER_NOT_FOUND');\n      }\n\n      quest = await this.databaseService.quest.findUnique({\n        where: {\n          id: questId,\n        },\n        include: {\n          tasks: true,\n        },\n      });\n\n      if (!quest) {\n        throw new BadRequestException('error.QUEST_NOT_FOUND');\n      }\n\n      task = quest.tasks.find((task) => task.id === taskId);\n\n      if (!task) {\n        throw new BadRequestException('error.TASK_NOT_FOUND');\n      }\n    } catch (err) {\n      if (err instanceof HttpException) {\n        throw err;\n      }\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n\n    // Check user already finished the task\n    const userTaskStatus = await this.databaseService.userTaskStatus.findUnique(\n      {\n        where: {\n          unique_user_task: {\n            userId,\n            taskId,\n          },\n        },\n      },\n    );\n\n    if (userTaskStatus) {\n      throw new ConflictException('error.TASK_ALREADY_FINISHED');\n    }\n\n    // Handle task finish\n    const response = await this.handleTaskFinish(task, user.walletAddress);\n    if (!response) {\n      throw new BadRequestException('error.TASK_NOT_FINISHED');\n    }\n\n    // Finish the task\n    try {\n      const [_, userQuestStatus, __, history] =\n        await this.databaseService.$transaction([\n          this.databaseService.userTaskStatus.create({\n            data: {\n              userId,\n              taskId,\n              status: true,\n            },\n          }),\n          this.databaseService.userQuestStatus.upsert({\n            where: {\n              unique_user_quest: {\n                userId,\n                questId,\n              },\n            },\n            update: {\n              clearedTaskCount: {\n                increment: 1,\n              },\n            },\n            create: {\n              userId,\n              questId,\n              clearedTaskCount: 1,\n            },\n          }),\n          this.databaseService.leaderboard.update({\n            where: {\n              userId: userId,\n            },\n            data: {\n              point: {\n                increment: task.rewardPoint,\n              },\n            },\n          }),\n          this.databaseService.userLeaderboardHistory.create({\n            data: {\n              userId,\n              taskId,\n              title: task.title + ' task Completed',\n              point: task.rewardPoint,\n            },\n          }),\n        ]);\n\n      // Check if all required tasks are finished\n      const requiredTaskCount = quest.tasks.filter(\n        (task) => task.type === 'REQUIRED',\n      ).length;\n\n      await this.databaseService.userQuestStatus.update({\n        where: {\n          unique_user_quest: {\n            userId,\n            questId,\n          },\n        },\n        data: {\n          status: userQuestStatus.clearedTaskCount === requiredTaskCount,\n        },\n      });\n\n      return history;\n    } catch (err) {\n      if (err instanceof Prisma.PrismaClientKnownRequestError) {\n        if (err.code === 'P2002') {\n          throw new ConflictException('error.TASK_ALREADY_FINISHED');\n        }\n      }\n\n      if (err instanceof HttpException) {\n        throw err;\n      }\n\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n  }\n\n  // Utility function\n  private async handleTaskFinish(\n    task: task,\n    userWalletAddress: string,\n  ): Promise {\n    const contentType = task.contentType;\n    const content = task.content as TaskContent;\n    let response: boolean = false;\n\n    switch (contentType) {\n      case 'SNS': {\n        response = true;\n        break;\n      }\n      case 'API': {\n        response = await taskApiCall(content, userWalletAddress);\n        break;\n      }\n    }\n\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\n\nRedisService \n\nRedisService \n\n\n\nRedisModule\n\nRedisModule\n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/providers/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RedisService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RedisService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { createClient } from 'redis';\nimport { RedisService } from './redis.service';\n\n@Global()\n@Module({\n  providers: [\n    {\n      provide: 'REDIS_CLIENT',\n      useFactory: async () => {\n        const client = createClient({\n          socket: {\n            host: process.env.REDIS_HOST,\n            port: Number(process.env.REDIS_PORT),\n          },\n        });\n        await client.connect();\n        return client;\n      },\n    },\n    RedisService,\n  ],\n  exports: [RedisService],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RedisService.html":{"url":"injectables/RedisService.html","title":"injectable - RedisService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RedisService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/providers/redis/redis.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                del\n                            \n                            \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    Public\n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redis: RedisClientType)\n                    \n                \n                        \n                            \n                                Defined in src/providers/redis/redis.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redis\n                                                  \n                                                        \n                                                                    RedisClientType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        del\n                        \n                    \n                \n            \n            \n                \n                        \n                    del(k: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/redis/redis.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                k\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(k: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/redis/redis.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                k\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(string: string, value: any, expiredTime: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/providers/redis/redis.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                string\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiredTime\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { RedisClientType } from 'redis';\n\n@Injectable()\nexport class RedisService {\n  constructor(\n    @Inject('REDIS_CLIENT')\n    private readonly redis: RedisClientType,\n  ) {}\n\n  public async get(k: string) {\n    return await this.redis.get(k);\n  }\n\n  public async set(string: string, value: any, expiredTime: number) {\n    return await this.redis.set(string, value, {\n      EX: expiredTime,\n    });\n  }\n\n  public async del(k: string) {\n    return await this.redis.del(k);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TaskContent.html":{"url":"interfaces/TaskContent.html","title":"interface - TaskContent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TaskContent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/types.ts:13\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { user } from '@prisma/db';\n\nexport interface JwtPayload {\n  iss: string;\n  sub: string;\n  aud: string;\n  iat: number;\n  exp: number;\n}\n\nexport type AuthUser = Partial;\n\nexport interface TaskContent {\n  [key: string]: any;\n  url: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                getUserQuestStatus\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(user: AuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(user: AuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        getUserQuestStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserQuestStatus(user: AuthUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('quest-status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(user: AuthUser, patchUserProfileDto: PatchUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/user/user.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchUserProfileDto\n                                            \n                                                            PatchUserProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Patch, UseGuards } from '@nestjs/common';\nimport { User } from 'src/commons/decorators/request/user.decorator';\nimport { AuthGuard } from 'src/commons/guards/auth.guard';\nimport { AuthUser } from 'src/types';\nimport { PatchUserProfileDto } from './dtos/patch-user-profile.dto';\nimport { UserService } from './user.service';\n\n@Controller('user')\n@UseGuards(AuthGuard)\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get()\n  public async getUser(@User() user: AuthUser) {\n    return user;\n  }\n\n  @Get('profile')\n  public async getProfile(@User() user: AuthUser) {\n    return await this.userService.getProfile(user.id);\n  }\n\n  @Patch('profile')\n  public async updateProfile(\n    @User() user: AuthUser,\n    @Body() patchUserProfileDto: PatchUserProfileDto,\n  ) {\n    return await this.userService.patchProfile(user.id, patchUserProfileDto);\n  }\n\n  @Get('quest-status')\n  public async getUserQuestStatus(@User() user: AuthUser) {\n    return await this.userService.getUserQuestStatus(user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getProfile\n                            \n                            \n                                    Public\n                                    Async\n                                getUserQuestStatus\n                            \n                            \n                                    Public\n                                    Async\n                                patchProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getUserQuestStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserQuestStatus(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        patchProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchProfile(userId: string, patchUserProfileDto: PatchUserProfileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/user/user.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                patchUserProfileDto\n                                            \n                                                            PatchUserProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { DatabaseService } from '@providers/database/database.service';\nimport { PatchUserProfileDto } from './dtos/patch-user-profile.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(private readonly databaseService: DatabaseService) {}\n\n  public async getProfile(userId: string) {\n    try {\n      const profile = await this.databaseService.profile.findUnique({\n        where: {\n          id: userId,\n        },\n      });\n\n      return {\n        ...profile,\n        interests: profile.interests.split(','),\n      };\n    } catch (err) {\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n  }\n\n  public async patchProfile(\n    userId: string,\n    patchUserProfileDto: PatchUserProfileDto,\n  ) {\n    const { interests } = patchUserProfileDto;\n\n    try {\n      const existInterests = await this.databaseService.interest.findMany({\n        where: {\n          name: {\n            in: interests,\n          },\n        },\n      });\n\n      if (existInterests.length !== interests.length) {\n        throw new BadRequestException('error.INVALID_INTERESTS');\n      }\n\n      await this.databaseService.profile.update({\n        where: {\n          id: userId,\n        },\n        data: {\n          interests: interests.join(','),\n        },\n      });\n    } catch (err) {\n      if (err instanceof HttpException) {\n        throw err;\n      }\n\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n  }\n\n  public async getUserQuestStatus(userId: string) {\n    try {\n      const finished = await this.databaseService.userQuestStatus.findMany({\n        where: {\n          userId,\n          status: true,\n        },\n        include: {\n          quest: true,\n        },\n      });\n\n      const ongoing = await this.databaseService.userQuestStatus.findMany({\n        where: {\n          userId,\n          status: false,\n        },\n        include: {\n          quest: true,\n        },\n      });\n\n      return {\n        finished,\n        ongoing,\n      };\n    } catch (err) {\n      throw new InternalServerErrorException('error.INTERNAL_SERVER_ERROR');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/commons/classes/i18n.exception.ts\n            \n            class\n            I18nException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/commons/decorators/auth/isPublic.decorator.ts\n            \n            variable\n            IsPublic\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/decorators/class-validator/isEthTxHash.decorator.ts\n            \n            variable\n            IsEthTxHash\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/decorators/class-validator/isEthWallet.decorator.ts\n            \n            variable\n            IsEthWalletAddress\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/decorators/request/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/dtos/connectWallet.dto.ts\n            \n            class\n            ConnectWalletDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/commons/dtos/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/commons/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/commons/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                src/commons/interceptors/i18n.interceptor.ts\n            \n            injectable\n            I18nInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/easy-test/easy-test.controller.ts\n            \n            controller\n            EasyTestController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/easy-test/easy-test.service.ts\n            \n            injectable\n            EasyTestService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            getCORSOrigins\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/create-nonce.dto.ts\n            \n            class\n            CreateNonceDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/leaderboard/dtos/get-leaderboard.dto.ts\n            \n            class\n            GetLeaderboardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/leaderboard/leaderboard.controller.ts\n            \n            controller\n            LeaderboardController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/leaderboard/leaderboard.service.ts\n            \n            injectable\n            LeaderboardService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/quest/dtos/get-quests.dto.ts\n            \n            class\n            GetQuestsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/quest/dtos/get-quests.dto.ts\n            \n            class\n            GetQuestsFilterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/quest/quest.controller.ts\n            \n            controller\n            QuestController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/quest/quest.service.ts\n            \n            injectable\n            QuestService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/quest/utils.ts\n            \n            function\n            taskApiCall\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/dtos/patch-user-profile.dto.ts\n            \n            class\n            PatchUserProfileDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/providers/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/providers/redis/redis.service.ts\n            \n            injectable\n            RedisService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/types.ts\n            \n            interface\n            TaskContent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            decryptAES256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            decryptRSAWithPrivateKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            decryptRSAWithPublicKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            encryptAES256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            encryptRSAWithPrivateKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            encryptRSAWithPublicKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            generateRSAKeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            getRSAServerKeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            isEmptyObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            makeRandomAlphaNumericString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            manualValidateClass\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            readServerRSAPrivateKeyFromFs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            sha256Hash\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            sleep\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            throwExceptionByHttpStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            variable\n            generateSignatureWithRsaPrivateKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            variable\n            verifySignatureWithRsaPublicKey\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.4.4\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.4.4\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/platform-express : ^10.4.4\n        \n            @nestjs/throttler : 4.2.1\n        \n            @prisma/client : ^5.20.0\n        \n            @ssut/nestjs-sqs : ^3.0.0\n        \n            axios : ^1.7.7\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dayjs : ^1.11.13\n        \n            nestjs-i18n : ^10.4.9\n        \n            node-rsa : ^1.1.1\n        \n            redis : ^4.7.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            viem : ^2.21.15\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            decryptAES256   (src/.../utils.ts)\n                        \n                        \n                            decryptRSAWithPrivateKey   (src/.../utils.ts)\n                        \n                        \n                            decryptRSAWithPublicKey   (src/.../utils.ts)\n                        \n                        \n                            encryptAES256   (src/.../utils.ts)\n                        \n                        \n                            encryptRSAWithPrivateKey   (src/.../utils.ts)\n                        \n                        \n                            encryptRSAWithPublicKey   (src/.../utils.ts)\n                        \n                        \n                            generateRSAKeyPair   (src/.../utils.ts)\n                        \n                        \n                            getCORSOrigins   (src/.../main.ts)\n                        \n                        \n                            getRSAServerKeyPair   (src/.../utils.ts)\n                        \n                        \n                            isEmptyObject   (src/.../utils.ts)\n                        \n                        \n                            makeRandomAlphaNumericString   (src/.../utils.ts)\n                        \n                        \n                            manualValidateClass   (src/.../utils.ts)\n                        \n                        \n                            readServerRSAPrivateKeyFromFs   (src/.../utils.ts)\n                        \n                        \n                            sha256Hash   (src/.../utils.ts)\n                        \n                        \n                            sleep   (src/.../utils.ts)\n                        \n                        \n                            taskApiCall   (src/.../utils.ts)\n                        \n                        \n                            throwExceptionByHttpStatus   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCORSOrigins\n                        \n                    \n                \n            \n            \n                \ngetCORSOrigins()\n                \n            \n\n\n\n\n        \n    \n    src/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        decryptAES256\n                        \n                    \n                \n            \n            \n                \ndecryptAES256(encryptedData: string, spec: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                encryptedData\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                spec\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decryptRSAWithPrivateKey\n                        \n                    \n                \n            \n            \n                \ndecryptRSAWithPrivateKey(encryptedData: string, privateKey: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                encryptedData\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                privateKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decryptRSAWithPublicKey\n                        \n                    \n                \n            \n            \n                \ndecryptRSAWithPublicKey(encryptedData: string, publicKey: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                encryptedData\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                publicKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encryptAES256\n                        \n                    \n                \n            \n            \n                \nencryptAES256(data: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encryptRSAWithPrivateKey\n                        \n                    \n                \n            \n            \n                \nencryptRSAWithPrivateKey(data: string, privateKey: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                privateKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encryptRSAWithPublicKey\n                        \n                    \n                \n            \n            \n                \nencryptRSAWithPublicKey(data: string, publicKey: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                publicKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateRSAKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateRSAKeyPair(privateKeyPassPhrase?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyPassPhrase\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRSAServerKeyPair\n                        \n                    \n                \n            \n            \n                \ngetRSAServerKeyPair()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmptyObject\n                        \n                    \n                \n            \n            \n                \nisEmptyObject(obj)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        makeRandomAlphaNumericString\n                        \n                    \n                \n            \n            \n                \nmakeRandomAlphaNumericString(length: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                length\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        manualValidateClass\n                        \n                    \n                \n            \n            \n                \nmanualValidateClass(value: any, classSignature: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                classSignature\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        readServerRSAPrivateKeyFromFs\n                        \n                    \n                \n            \n            \n                \nreadServerRSAPrivateKeyFromFs()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sha256Hash\n                        \n                    \n                \n            \n            \n                \nsha256Hash(data: string, key?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sleep\n                        \n                    \n                \n            \n            \n                \nsleep(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ms\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        throwExceptionByHttpStatus\n                        \n                    \n                \n            \n            \n                \nthrowExceptionByHttpStatus(error: Required, message?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        Required\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/modules/quest/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        taskApiCall\n                        \n                    \n                \n            \n            \n                \ntaskApiCall(content: TaskContent, userWalletAddress: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                content\n                                            \n                                                            TaskContent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userWalletAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nDescription\nNest framework for IF-Labs Server.\nProject setup\n\nInstall dependencies\n\nExample :$ yarn install\nAdd server rsa private key file\n\nExample :$ mkdir -p resorces/rsa/\ncd resorces/rsa/\ntouch server_pk_pkcs1.pem\nDB setup\n\nExample :$ docker-compose up -d\n$ yarn db-setupCompile and run the project\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodRun tests\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nGeneral Error Object Format\nExample :{\n  \"message\": \"error message with i18n\",\n  \"statusCode\": \"Http error code\",\n  \"timestamp\": \"timestamp\",\n  \"path\": \"request path\"\n}Stay in touch\n\nAuthor - Vincent Jang\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EasyTestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LeaderboardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_EasyTestModule\n\n\n\ncluster_EasyTestModule_providers\n\n\n\ncluster_LeaderboardModule\n\n\n\ncluster_LeaderboardModule_providers\n\n\n\ncluster_QuestModule\n\n\n\ncluster_QuestModule_providers\n\n\n\ncluster_RedisModule\n\n\n\ncluster_RedisModule_exports\n\n\n\ncluster_RedisModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nEasyTestModule\n\nEasyTestModule\n\nAppModule -->\n\nEasyTestModule->AppModule\n\n\n\n\n\nLeaderboardModule\n\nLeaderboardModule\n\nAppModule -->\n\nLeaderboardModule->AppModule\n\n\n\n\n\nQuestModule\n\nQuestModule\n\nAppModule -->\n\nQuestModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nRedisService \n\nRedisService \n\nRedisService  -->\n\nRedisModule->RedisService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nEasyTestService\n\nEasyTestService\n\nEasyTestModule -->\n\nEasyTestService->EasyTestModule\n\n\n\n\n\nLeaderboardService\n\nLeaderboardService\n\nLeaderboardModule -->\n\nLeaderboardService->LeaderboardModule\n\n\n\n\n\nQuestService\n\nQuestService\n\nQuestModule -->\n\nQuestService->QuestModule\n\n\n\n\n\nRedisService\n\nRedisService\n\nRedisModule -->\n\nRedisService->RedisModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthUser   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/types.ts\n    \n    \n        \n            \n                \n                    \n                    AuthUser\n                \n            \n            \n                \n                        Partial\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            generateSignatureWithRsaPrivateKey   (src/.../utils.ts)\n                        \n                        \n                            IsEthTxHash   (src/.../isEthTxHash.decorator.ts)\n                        \n                        \n                            IsEthWalletAddress   (src/.../isEthWallet.decorator.ts)\n                        \n                        \n                            IsPublic   (src/.../isPublic.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            verifySignatureWithRsaPublicKey   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        generateSignatureWithRsaPrivateKey\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  message: string,\n  privateKey: string,\n): string => {\n  try {\n    const sign = crypto.createSign('SHA256');\n    sign.update(message, 'utf8');\n    sign.end();\n\n    const output = sign.sign(privateKey, 'base64');\n    return output;\n  } catch (error) {\n    throw new PreconditionFailedException(\n      `fail to create signature ${error.message}`,\n    );\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifySignatureWithRsaPublicKey\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  plainMessage: string,\n  signature: string,\n  publicKey: string,\n): boolean => {\n  try {\n    const verify = crypto.createVerify('SHA256');\n    verify.update(plainMessage, 'utf8');\n    verify.end();\n\n    return verify.verify(publicKey, signature, 'base64');\n  } catch (error) {\n    throw new PreconditionFailedException(\n      `Fail to verify signature :: ${error.message}`,\n    );\n  }\n}\n                    \n                \n\n\n        \n    \n\n    src/commons/decorators/class-validator/isEthTxHash.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsEthTxHash\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (validationOptions?: ValidationOptions) => {\n  return function (object: Object, propertyName: string) {\n    registerDecorator({\n      name: 'isEthTxHash',\n      target: object.constructor,\n      propertyName: propertyName,\n      validator: {\n        validate(value: any, args?: ValidationArguments) {\n          const pattern = /^0x[a-f0-9]{64}$/;\n          return pattern.test(value) && !/\\s/.test(value);\n        },\n        defaultMessage: buildMessage(\n          (eachPrefix) => eachPrefix + '$property is not valid',\n        ),\n      },\n    });\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/commons/decorators/class-validator/isEthWallet.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsEthWalletAddress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (validationOptions?: ValidationOptions) => {\n  return function (object: Object, propertyName: string) {\n    registerDecorator({\n      name: 'isEthWalletAddress',\n      target: object.constructor,\n      propertyName: propertyName,\n      validator: {\n        validate(value: any, args?: ValidationArguments) {\n          const pattern = /^0x[a-fA-F0-9]{40}$/;\n          return pattern.test(value) && !/\\s/.test(value);\n        },\n        defaultMessage: buildMessage(\n          (eachPrefix) => eachPrefix + '$property is not valid',\n        ),\n      },\n    });\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/commons/decorators/auth/isPublic.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsPublic\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/commons/decorators/request/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): Partial | null => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.parsedPayload ? request.parsedPayload.user : null;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
